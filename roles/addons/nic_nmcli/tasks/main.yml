---
- name: include_vars ░ Gather OS specific variables
  # This task gathers variables defined in OS specific files.
  #
  # Search vars in:
  #  - <distribution>_<major>.yml    # eg. CentOS_8.yml
  #  - <os_family>_<major>.yml       # eg. RedHat_8.yml
  #  - <distribution>.yml            # eg. CentOS.yml
  #  - <os_family>.yml               # eg. RedHat.yml
  #
  # If no OS specific file is found, the role will default to vars/main.yml
  #
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.os_family }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}.yml"
        - "vars/{{ ansible_facts.os_family }}.yml"
      skip: true

- name: "package █ Install {{ nic_nmcli_packages_to_install | join(' ') }}"
  package:
    name: "{{ nic_nmcli_packages_to_install }}"
    state: present

- name: "service █ Manage {{ nic_nmcli_services_to_start | join(' ') }} state"
  service:
    name: "{{ item }}"
    enabled: "{{ (enable_services | bool) | ternary('yes','no') }}"
    state: started
  loop: "{{ nic_nmcli_services_to_start }}"
  tags:
    - service

#- name: Solve possible unmanaged (Ubuntu only)
#  file:
#    path: /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
#    state: touch
#  when:
#    - ansible_facts.distribution_major_version == "18"
#    - ansible_facts.os_family == "Ubuntu"

# Note from JK
# We could add so much more features here, like VLAN, LACP, MTU, etc. Easy to add.
- name: nmcli █ Set NIC configuration
  nmcli:
    conn_name: "{{ item.name | string }}"
    type: "{% if item.type is defined and item.type is not none %}{{ item.type }}{% else %}ethernet{% endif %}"
    ip4: "{{ item.ip4 }}/{{ networks[item.network].prefix }}"
    state: present
    gw4: "{% if networks[item.network].gateway is defined and networks[item.network].gateway is not none %}{{ networks[item.network].gateway }}{% endif %}"
  loop: "{{ network_interfaces }}"
  tags:
    - identify

# Should be solved in ansible 2.10
#- name: Bug fix for static ip (RedHat/Centos only)
#  replace:
#     path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
#     regexp: 'BOOTPROTO=dhcp'
#     replace: 'BOOTPROTO=none'
#     backup: no
#  with_items: "{{ network_interfaces }}"
#  when:
#    - ansible_facts.distribution_major_version == "7"
#    - ansible_facts.os_family == "RedHat"
#  tags:
#    - identify

