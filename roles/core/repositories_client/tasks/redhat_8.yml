---
- name: set_fact ░ Set static baseurl prefix
  set_fact:
    baseurl_prefix:
      "http://{{ networks[j2_node_main_network]['services_ip']['repository_ip'] }}/repositories/\
      {{ ep_operating_system['repositories_environment'] | default('') }}/\
      {{ ep_operating_system['distribution'] }}/\
      {{ ep_operating_system['distribution_version'] | default(ep_operating_system['distribution_major_version']) }}/\
      $basearch/"

- name: yum_repository █ Setting repositories
  yum_repository:
    name: "{{ item.name | default(item) }}"
    description: "{{ item.name | default(item) }} gen by Ansible"
    baseurl: "{{ item.baseurl | default(baseurl_prefix + item.name | default(item)) }}/"
    enabled: "{{ item.enabled | default(1) }}"
    exclude: "{{ item.exclude | default(omit) }}"
    gpgcheck: "{{ item.gpgcheck | default(0) }}"
    gpgkey: "{{ item.gpgkey | default(omit) }}"
    proxy: "{{ item.proxy | default(omit) }}"
  with_items: "{{ repositories | union(external_repositories|default([])) }}"
  when: ( item != 'os' ) and ( item.name is not defined or item.name != 'os' )

- name: yum_repository █ Setting OS repositories
  yum_repository:
    name: "{{ item.repoid }}"
    description: "{{ item.repoid }} gen by Ansible"
    baseurl: "{{ item.baseurl | default(baseurl_prefix + 'os/' + item.repoid) }}"
    enabled: "{{ item.enabled | default(1) }}"
    exclude: "{{ item.exclude | default(omit) }}"
    gpgcheck: "{{ item.gpgcheck | default(0) }}"
    gpgkey: "{{ item.gpgkey | default(omit) }}"
    proxy: "{{ item.proxy | default(omit) }}"
  loop:
  # Combine BaseOS and AppStream with 'os' parameters if any. Otherwise, this
  # will configure BaseOS and AppStream with default values.
    - "{{ repositories|selectattr('name', 'defined')
          |selectattr('name', 'match', 'os')|list
          |combine({'repoid':'BaseOS'}) }}"
    - "{{ repositories|selectattr('name', 'defined')
          |selectattr('name', 'match', 'os')|list
          |combine({'repoid':'AppStream'}) }}"
  when: ( 'os' in repositories ) or ( item.name is defined and item.name == 'os' )
