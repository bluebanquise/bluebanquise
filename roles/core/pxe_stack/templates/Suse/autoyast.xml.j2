#jinja2: lstrip_blocks: True
<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">

  <add-on>
    <add_on_products config:type="list">
{% for repo in repositories %}
  {% if repo != "os" %}
      <listentry>
        <media_url>http://{{ networks[j2_node_main_network]['services_ip']['repository_ip'] }}/repositories/{{ ep_operating_system['repositories_environment'] | default('') }}/{{ ep_operating_system['distribution'] }}/{{ ep_operating_system['distribution_version'] | default(ep_operating_system['distribution_major_version']) }}/{{ ep_hardware['cpu']['architecture'] }}/{{ repo }}</media_url>
        <alias>{{ repo }}</alias>
        <ask_on_error config:type="boolean">false</ask_on_error>
        <confirm_license config:type="boolean">false</confirm_license>
        <name>{{ repo }}</name>
      </listentry>
  {% endif %}
{% endfor %}
    </add_on_products>
  </add-on>

  <keyboard>
    <keymap>{{hostvars[groups[item][0]]['ep_configuration']['keyboard_layout']|lower}}</keymap>
  </keyboard>

  <language>
    <language>{{hostvars[groups[item][0]]['ep_configuration']['system_language']|replace('.UTF-8','')}}</language>
    <languages/>
  </language>

  <timezone>
    <hwclock>UTC</hwclock>
    <timezone>{{time_zone}}</timezone>
  </timezone>

  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <managed config:type="boolean">true</managed>
  </networking>

  <software>
    <products config:type="list">
      <product>SLES</product>
    </products>
    <install_recommended config:type="boolean">true</install_recommended>
    <patterns config:type="list">
      <pattern>base</pattern>
    </patterns>
    <packages config:type="list">
      <package>openssh-server</package>
    </packages>
  </software> 

  <bootloader>
{% if hostvars[groups[item][0]]['ep_ipxe_platform'] == 'efi' %}
    <loader_type>grub2-efi</loader_type>
{% else %}
    <loader_type>grub2</loader_type>
{% endif %}
  </bootloader>

{{hostvars[groups[item][0]]['ep_partitioning']}}

 <users config:type="list">
  <user>
    <username>root</username>
    <user_password>{{hostvars[groups[item][0]]['authentication_root_password_sha512']}}</user_password>
    <uid>0</uid>
    <gid>0</gid>
    <encrypted config:type="boolean">true</encrypted>
    <fullname>Root User</fullname>
    <authorized_keys config:type="list">
{% for ssh_key in hostvars[groups[item][0]]['authentication_ssh_keys'] %}
      <listentry>{{ssh_key}}</listentry>
{% endfor %}
    </authorized_keys>
   </user>
 </users>

<services-manager>
  <default_target>multi-user</default_target>
  <services>
    <enable config:type="list">
      <service>sshd</service>
    </enable>
  </services>
</services-manager>

<scripts>
    <pre-scripts config:type="list">
{% if hostvars[groups[item][0]]['ep_preserve_efi_first_boot_device'] == true %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>pre.sh</filename>
        <interpreter>shell</interpreter>
	<source><![CDATA[
#!/bin/sh

if [ -d /sys/firmware/efi ]; then
    netboot=`efibootmgr | awk '/^BootCurrent:/{print $2;}'`
    [ ! -z $netboot ] && echo $netboot > /tmp/uefi_netboot
    efibootmgr > /tmp/uefiall
fi

]]>
	</source>
      </script>
{% endif %}
{% if hostvars[groups[item][0]]['ep_autoinstall_pre_script'] is defined and hostvars[groups[item][0]]['ep_autoinstall_pre_script'] is not none %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>custom-pre.sh</filename>
        <interpreter>shell</interpreter>
	<source><![CDATA[
{{ hostvars[groups[item][0]]['ep_autoinstall_pre_script'] }}
]]>
	</source>
      </script>
{% endif %}
    </pre-scripts>
    <chroot-scripts config:type="list">
{% if hostvars[groups[item][0]]['ep_preserve_efi_first_boot_device'] == true %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>post-no-chroot.sh</filename>
        <interpreter>shell</interpreter>
        <chrooted config:type="boolean">false</chrooted>
        <source><![CDATA[
#!/bin/sh

if [ -d /sys/firmware/efi ]; then
    echo "Restoring EFI first boot device..."
    netboot=$(cat /tmp/uefi_netboot)
    currentorder=`efibootmgr | awk '/^BootOrder:/{print $2;}'`
    efibootmgr -o $netboot,$(echo $currentorder | sed "s/$netboot//" | sed 's/^,//' | sed 's/,$//' | sed 's/,,/,/')
    echo " End."
fi

]]>
	</source>
      </script>
{% endif %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>post.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
#!/bin/sh

# Turn the kernel parameters into variables
# We are looking for next_server value
set -- `cat /proc/cmdline`
for I in $*; do case "$I" in *=*) eval $I;; esac; done

echo "All went well, we can inform next-server we succeeded"
curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$(hostname -s)&boot=disk"

]]>
        </source>
      </script>
    </chroot-scripts>
{% if hostvars[groups[item][0]]['ep_autoinstall_post_script'] is defined and hostvars[groups[item][0]]['ep_autoinstall_post_script'] is not none %}
    <post-scripts config:type="list">
      <script>      
        <filename>custom-post.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
{{ hostvars[groups[item][0]]['ep_autoinstall_post_script'] }}
]]>
        </source>
      </script>
    </post-scripts>
{% endif %}
  </scripts>

<general>
  <mode>
    <confirm config:type="boolean">false</confirm>
  </mode>
  <signature-handling>
    <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
    <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
    <accept_non_trusted_gpg_key config:type="boolean">true</accept_non_trusted_gpg_key>
    <import_gpg_key config:type="boolean">true</import_gpg_key>
  </signature-handling>
 </general>

</profile>





