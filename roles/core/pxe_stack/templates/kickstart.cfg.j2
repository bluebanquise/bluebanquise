#### Blue Banquise file ####
## {{ ansible_managed }}

##### General settings

# Do not use GUI
text

# Run the Setup Agent on first boot
firstboot --enable

# System keyboard layout
keyboard --vckeymap={{ hostvars[groups[item][0]]['ep_configuration']['keyboard_layout']|lower }} --xlayouts='{{ hostvars[groups[item][0]]['ep_configuration']['keyboard_layout']|lower }}'

# System language
lang {{ hostvars[groups[item][0]]['ep_configuration']['system_language'] }}

# System timezone
timezone {{ time_zone }} --isUtc

# Reboot after installation
reboot

##### Authentication settings

{% if hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version']|int < 8 %}
# Define authentication method (sha512)
auth --enableshadow --passalgo=sha512
{% endif %}

# Root password (sha512)
rootpw --iscrypted {{ hostvars[groups[item][0]]['authentication_root_password_sha512'] }}


##### Network

# Network settings
network --bootproto=dhcp --ipv6=auto --activate
network --hostname=localhost.localdomain


##### Security

# SELinux
{% if hostvars[groups[item][0]]['ep_access_control'] is defined and
   hostvars[groups[item][0]]['ep_access_control'] in ['enforcing', 'permissive'] %}
selinux --{{ hostvars[groups[item][0]]['ep_access_control'] }}
{% else %}
selinux --disabled
{% endif %}

# Firwalld
{% if hostvars[groups[item][0]]['ep_firewall'] is defined and hostvars[groups[item][0]]['ep_firewall'] == true %}
firewall --enabled
{% else %}
firewall --disabled
{% endif %}


##### Partitionning

# Bootloader configuration
bootloader --append="{{ hostvars[groups[item][0]]['ep_kernel_parameters'] }}" --location=mbr

# Partitioning
{{ hostvars[groups[item][0]]['ep_partitioning'] }}


##### Packages

%packages
@core
curl
%end


# This EFI first boot order restoration trick is from stacki, not from me.
# See https://github.com/Teradata/stacki for more details
{% if hostvars[groups[item][0]]['ep_preserve_efi_first_boot_device'] == true %}
%pre
set -x
if [ -d /sys/firmware/efi ]; then
    netboot=`efibootmgr | awk '/^BootCurrent:/{print $2;}'`
    [ ! -z $netboot ] && echo $netboot > /tmp/uefi_netboot
    efibootmgr > /tmp/uefiall
fi
set +x
%end

%post --nochroot --log /mnt/sysimage/root/efirestore_post-install.log
set -x
if [ -d /sys/firmware/efi ]; then
    echo "Restoring EFI first boot device..."
    netboot=$(cat /tmp/uefi_netboot)
    currentorder=`efibootmgr | awk '/^BootOrder:/{print $2;}'`
    efibootmgr -o $netboot,$(echo $currentorder | sed "s/$netboot//" | sed 's/^,//' | sed 's/,$//' | sed 's/,,/,/')
    echo " End."
fi
set +x
%end
{% endif %}


# Main post, ssh keys and inform server auto install is done
%post --interpreter /bin/bash --log /root/main_post-install.log
set -x

# Add ssh keys from ssh_keys list
mkdir /root/.ssh
cat << xxEOFxx >> /root/.ssh/authorized_keys
{% for ssh_key in hostvars[groups[item][0]]['authentication_ssh_keys'] %}
{{ ssh_key }}
{% endfor %}
xxEOFxx
# Ensure SELinux configuration is ok
restorecon -R -v /root/.ssh

# Turn the kernel parameters into variables
# We are looking for next_server value
set -- `cat /proc/cmdline`
for I in $*; do case "$I" in *=*) eval $I;; esac; done

echo "All went well, we can inform next-server we succeeded"
curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$(hostname -s)&boot=disk"
set +x
%end


# Custom scripts
{% if hostvars[groups[item][0]]['ep_autoinstall_pre_script'] is defined and hostvars[groups[item][0]]['ep_autoinstall_pre_script'] is not none %}
%pre --log /root/custom_pre.log
{{ hostvars[groups[item][0]]['ep_autoinstall_pre_script'] }}
%end
{% endif %}

{% if hostvars[groups[item][0]]['ep_autoinstall_post_script'] is defined and hostvars[groups[item][0]]['ep_autoinstall_post_script'] is not none %}
%post --log /root/custom_post.log
{{ hostvars[groups[item][0]]['ep_autoinstall_post_script'] }}
%end
{% endif %}
