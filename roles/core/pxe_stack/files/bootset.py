#!/usr/bin/env python3

# ██████╗ ██╗     ██╗   ██╗███████╗██████╗  █████╗ ███╗   ██╗ ██████╗ ██╗   ██╗██╗███████╗███████╗
# ██╔══██╗██║     ██║   ██║██╔════╝██╔══██╗██╔══██╗████╗  ██║██╔═══██╗██║   ██║██║██╔════╝██╔════╝
# ██████╔╝██║     ██║   ██║█████╗  ██████╔╝███████║██╔██╗ ██║██║   ██║██║   ██║██║███████╗█████╗  
# ██╔══██╗██║     ██║   ██║██╔══╝  ██╔══██╗██╔══██║██║╚██╗██║██║▄▄ ██║██║   ██║██║╚════██║██╔══╝  
# ██████╔╝███████╗╚██████╔╝███████╗██████╔╝██║  ██║██║ ╚████║╚██████╔╝╚██████╔╝██║███████║███████╗
# ╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚══▀▀═╝  ╚═════╝ ╚═╝╚══════╝╚══════╝
#
# booset tool, to manage nodes PXE boot
# 2019 - Benoît Leveugle <benoit.leveugle@sphenisc.com>
# https://github.com/oxedions/bluebanquise - MIT license

# Import dependances
from ClusterShell.NodeSet import NodeSet
from argparse import ArgumentParser
from shutil import copy2
import yaml
import os
import pwd
import grp
import re

# Colors, from https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Get arguments passed to bootset
parser = ArgumentParser()
parser.add_argument("-n", "--nodes", dest="nodes",
                    help="Target node(s). Use nodeset format for ranges.", metavar="NODE")
parser.add_argument("-b", "--boot", dest="boot",
                    help="Next pxe boot: can be osdeploy, diskless, or disk.")
parser.add_argument("-f", "--force", dest="force", default=" ",
                    help="Force. 'update' = files update, 'network' = static ip. Combine using comma separator.")
parser.add_argument("-i", "--image", dest="image", default="none",
                    help="Specify diskless image to be used, if using diskless boot.")

passed_arguments = parser.parse_args()


# Load main files
# This file is generated by Ansible and contains all we need for nodes
print(bcolors.OKBLUE+'[INFO] Loading /etc/bluebanquise/pxe/nodes_parameters.yml'+bcolors.ENDC)
with open('/etc/bluebanquise/pxe/nodes_parameters.yml', 'r') as f:
    nodes_parameters = yaml.load(f)
print(bcolors.OKBLUE+'[INFO] Loading /etc/bluebanquise/pxe/pxe_parameters.yml'+bcolors.ENDC)
with open('/etc/bluebanquise/pxe/pxe_parameters.yml', 'r') as f:
    pxe_parameters = yaml.load(f)

# Get apache user
apache_uid = pwd.getpwnam(pxe_parameters["pxe_parameters"]["apache_uid"]).pw_uid
apache_gid = grp.getgrnam(pxe_parameters["pxe_parameters"]["apache_gid"]).gr_gid

# Iteration on nodes
for node in NodeSet(passed_arguments.nodes):

    # Check if node exist in Ansible generated file
    print(bcolors.OKBLUE+'[INFO] Cheking if node '+str(node)+' exist...'+bcolors.ENDC)
    if str(node) in nodes_parameters:

        print(bcolors.OKGREEN+'[OK] Working on node '+str(node)+' ...'+bcolors.ENDC)
        # Check if we need to create or update files
        print('    ├── '+bcolors.OKBLUE+'[INFO] Checking '+str(node)+' files...'+bcolors.ENDC)
        if str(os.path.exists('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe')) == 'False' or 'update' in passed_arguments.force:
            print('    ├── '+bcolors.OKBLUE+'[INFO] Creating file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe'+bcolors.ENDC)
            dedicated_parameters = str('')
            if 'network' in passed_arguments.force:
                dedicated_parameters = str('ip='+nodes_parameters[str(node)]["network"]["node_main_network_interface_ip"]+'::'+nodes_parameters[str(node)]["network"]["node_main_network_gateway"]+':'+nodes_parameters[str(node)]["network"]["node_main_network_netmask"]+':'+str(node)+':'+nodes_parameters[str(node)]["network"]["node_main_network_interface"]+':none')
            generic_node_ipxe = """#!ipxe

echo | Entering {node_name}.ipxe file.
echo |
echo | Getting host specific variables...
# Current default action

set menu-default bootdiskless

# Current node parameters:
set equipment-profile {node_equipment_profile}
set dedicated-kernel-parameters

set diskless-image none

echo |
# Now chain to menu menu
echo | Now chaining to --> equipment_profiles/${{equipment-profile}}.ipxe
sleep 2
chain http://${{next-server}}/preboot_execution_environment/equipment_profiles/${{equipment-profile}}.ipxe || shell
""".format(node_name=node,node_equipment_profile=nodes_parameters[str(node)]["equipment_profile"])
            with open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','w') as ff:
                ff.write(generic_node_ipxe)
            os.chown('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe',apache_uid,apache_gid)
            if pxe_parameters["pxe_parameters"]["ansible_selinux_status"] == "enabled":
                os.system('restorecon -v /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe')
#        if str(os.path.exists('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'_bootosdeploy.ipxe')) == 'False' or 'update' in passed_arguments.force:
#            print('    ├── '+bcolors.OKBLUE+'[INFO] Creating file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'_bootosdeploy.ipxe'+bcolors.ENDC)
#            print('    ├── '+bcolors.OKBLUE+'[INFO] Copy from /var/www/html/preboot_execution_environment/equipment_ipxe_configurations/'+nodes_parameters[str(node)]["equipment_profile"]+'.ipxe'+bcolors.ENDC)
#            copy2('/var/www/html/preboot_execution_environment/equipment_ipxe_configurations/'+nodes_parameters[str(node)]["equipment_profile"]+'.ipxe', '/var/www/html/preboot_execution_environment/nodes/'+str(node)+'_bootosdeploy.ipxe')
#            os.chown('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'_bootosdeploy.ipxe',apache_uid,apache_gid)
        print('    ├── '+bcolors.OKGREEN+'[OK] Done.'+bcolors.ENDC)

        # Set boot to disk
        if passed_arguments.boot == 'disk':
            print('    ├── '+bcolors.OKBLUE+'[INFO] Switching boot to disk'+bcolors.ENDC)
            print('    ├── '+bcolors.OKBLUE+'[INFO] Editing file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe'+bcolors.ENDC)
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','r')
            filebuffer = file.readlines()
            for i in range(len(filebuffer)):
                if 'menu-default' in filebuffer[i]:
                    filebuffer[i] = 'set menu-default bootdisk\n'
            file.close
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','w')
            file.writelines(filebuffer)
            file.close
            print('    └── '+bcolors.OKGREEN+'[OK] Done.'+bcolors.ENDC)
            continue

        # Set boot to os deploy
        if passed_arguments.boot == 'osdeploy':
            print('    ├── '+bcolors.OKBLUE+'[INFO] Switching boot to osdeploy'+bcolors.ENDC)
            print('    ├── '+bcolors.OKBLUE+'[INFO] Editing file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe'+bcolors.ENDC)
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','r')
            filebuffer = file.readlines()
            for i in range(len(filebuffer)):
                if 'menu-default' in filebuffer[i]:
                    filebuffer[i] = 'set menu-default bootosdeploy\n'
            file.close
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','w')
            file.writelines(filebuffer)
            file.close
            print('    └── '+bcolors.OKGREEN+'[OK] Done.'+bcolors.ENDC)
            continue

        # Set boot to diskless
        if passed_arguments.boot == 'diskless':
            print('    ├── '+bcolors.OKBLUE+'[INFO] Switching boot to osdeploy'+bcolors.ENDC)
            print('    ├── '+bcolors.OKBLUE+'[INFO] Editing file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe'+bcolors.ENDC)
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','r')
            filebuffer = file.readlines()
            for i in range(len(filebuffer)):
                if 'menu-default' in filebuffer[i]:
                    filebuffer[i] = 'set menu-default bootdiskless\n'
            for i in range(len(filebuffer)):
                if 'diskless-image' in filebuffer[i]:
                    filebuffer[i] = 'set diskless-image '+passed_arguments.image+'\n'
            file.close
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','w')
            file.writelines(filebuffer)
            file.close
            print('    └── '+bcolors.OKGREEN+'[OK] Done.'+bcolors.ENDC)
            continue

        # Set boot to Minimal Live Linux
        if passed_arguments.boot == 'mll':
            print('    ├── '+bcolors.OKBLUE+'[INFO] Switching boot to minimal_live_linux'+bcolors.ENDC)
            print('    ├── '+bcolors.OKBLUE+'[INFO] Editing file /var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe'+bcolors.ENDC)
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','r')
            filebuffer = file.readlines()
            for i in range(len(filebuffer)):
                if 'menu-default' in filebuffer[i]:
                    filebuffer[i] = 'set menu-default minimal_live_linux\n'
            file.close
            file = open('/var/www/html/preboot_execution_environment/nodes/'+str(node)+'.ipxe','w')
            file.writelines(filebuffer)
            file.close
            print('    └── '+bcolors.OKGREEN+'[OK] Done.'+bcolors.ENDC)
            continue

        print('    └── '+bcolors.WARNING+'[WARNING] No action done, check your parameters. Skipping.'+bcolors.ENDC)

    else:
        print(bcolors.WARNING+'[WARNING] Node '+str(node)+' do not exist. Skipping.'+bcolors.ENDC)
        continue


