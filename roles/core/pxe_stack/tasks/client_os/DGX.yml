##### DGX OS

- name: "copy █ Copy osdeploy files {{ pxe_stack_htdocs_path }}/preboot_execution_environment/osdeploy/"
  ansible.builtin.copy:
    src: osdeploy/dgxos_{{ item.major }}.ipxe
    dest: "{{ pxe_stack_htdocs_path }}/preboot_execution_environment/osdeploy/dgxos_{{ item.major }}.ipxe"
    mode: 0644
    owner: "{{ pxe_stack_apache_user }}"
    group: "{{ pxe_stack_apache_group }}"
  loop: "{{ pxe_stack_supported_os.dgxos }}"

- name: "template █ Generate equipment_profiles {{ pxe_stack_htdocs_path }}/preboot_execution_environment/equipment_profiles/{item}.ipxe"
  ansible.builtin.template:
    src: "DGX/equipment_profile_dgxos.ipxe.j2"
    dest: "{{ pxe_stack_htdocs_path }}/preboot_execution_environment/equipment_profiles/{{ item | replace(equipment_naming+'_','') | trim }}.ipxe"
    mode: 0644
    owner: "{{ pxe_stack_apache_user }}"
    group: "{{ pxe_stack_apache_group }}"
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  tags:
    - template

- name: copy ░ Copy reference DGX curtin
  ansible.builtin.copy:
    src: "/var/www/html/repositories/dgxos/{{ hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] }}/x86_64/netboot/curtin/{{ hostvars[groups[item][0]]['ep_dgx_curtin_type'] }}-curtin.yaml"
    dest: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    owner: root
    group: root
    mode: 0600
    remote_src: yes
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  changed_when: false

- name: replace ░ Remove OEM from DGX curtin
  ansible.builtin.replace:
    path: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    after: '# Prepare oem-config'
    regexp: '^(.+)$'
    replace: " "
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  changed_when: false

- name: lineinfile ░ Set local parameters, allow root user
  ansible.builtin.lineinfile:
    path: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    regexp: '^kernel:$'
    line: |
      keyboard: {layout: {{ hostvars[groups[item][0]]['ep_configuration']['keyboard_layout']|lower }}, toggle: null, variant: ''}
      locale: {{ hostvars[groups[item][0]]['ep_configuration']['system_language'] }}
      user-data:
        disable_root: false

      kernel:
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  changed_when: false

- name: lineinfile ░ Enable reboot after install
  ansible.builtin.lineinfile:
    path: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    regexp: '^  mode: CHANGE_POWER_STATE$'
    line: '  mode: reboot'
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  changed_when: false

- name: lineinfile ░ Set BlueBanquise custom parameters into curtin
  ansible.builtin.lineinfile:
    path: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    insertafter: '^late_commands:'
    line: |
      #
        1_bb: ["curtin", "in-target", "--", "sh", "-c", "mkdir /root/.ssh"]
      {% for ssh_key in hostvars[groups[item][0]]['authentication_ssh_keys'] %}
        2_{{ loop.index }}_bb: ["curtin", "in-target", "--", "sh", "-c", "echo '{{ ssh_key }}' >> /root/.ssh/authorized_keys"]
      {% endfor %}
        4_bb: ["curtin", "in-target", "--", "sh", "-c", "sed -i 's/^#PermitRootLogin.*$/PermitRootLogin yes/g' /etc/ssh/sshd_config"]
        5_bb: ["curtin", "in-target", "--", "sh", "-c", "sed -i 's|^root:.:|root:{{ hostvars[groups[item][0]]['authentication_root_password_sha512'] }}:|' /etc/shadow"]
        6_bb: ["curtin", "in-target", "--", "sh", "-c", 'for I in `cat /proc/cmdline | tr " " "\n" | grep -E "^(node_hostname|ipxe_next_server)="` ; do eval $I; done; curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$node_hostname&boot=disk"']
        7_bb: ["curtin", "in-target", "--", "sh", "-c", '/bin/echo -e "network:\n  version: 2\n  ethernets:"> /etc/netplan/01-netcfg.yaml; for i in $(ip link show | grep ':\ en' | awk -F ' ' '{print $2}' | sed 's/://'); do /bin/echo -e "\n    $i:\n      dhcp4: true" >> /etc/netplan/01-netcfg.yaml; done;']
        # 8_bb: ["curtin", "in-target", "--", "sh", "-c", 'efibootmgr -o $(efibootmgr | grep BootCurrent | cut -d" " -f2),$(efibootmgr | grep BootOrder | sed "s/BootOrder:\ //" | sed "s/$(efibootmgr | grep BootCurrent | cut -d" " -f2),//")']
        9_bb: ["curtin", "in-target", "--", "sh", "-c", "apt-get remove -y nvidia-oem-config-eula"]
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
  changed_when: false

- name: copy █ Copy final curtin to destination
  ansible.builtin.copy:
    src: "/dev/shm/tmp_curtin_{{ item }}.yaml"
    dest: "{{ pxe_stack_htdocs_path }}/preboot_execution_environment/equipment_profiles/{{ item | replace(equipment_naming+'_','') | trim }}.curtin.yaml"
    mode: 0644
    owner: "{{ pxe_stack_apache_user }}"
    group: "{{ pxe_stack_apache_user }}"
    remote_src: yes
  with_items: "{{ j2_equipment_groups_list }}"
  when:
    - groups[item] | length > 0
    - hostvars[groups[item][0]]['ep_equipment_type'] == 'server'
    - (hostvars[groups[item][0]]['ep_operating_system']['distribution']|lower) in ['dgxos'] and hostvars[groups[item][0]]['ep_operating_system']['distribution_major_version'] == 5
