#jinja2: lstrip_blocks: "True"
#### Blue Banquise file ####
## {{ansible_managed}}

{###############################################################################
  Simple macro to write options, to avoid redundancy.
###############################################################################}
{% macro write_options(macro_options) %}
  {% for option in macro_options %}
    option {{ option }};
  {% endfor %}
{% endmacro %}

{###############################################################################
  Macro to write host into dhcp. Allows multiple declarations XOR patterns.
###############################################################################}
{% macro write_host(macro_host, macro_nic, macro_filename) %}

{% if macro_nic.dhcp_pattern is defined and macro_nic.dhcp_pattern is not none %}
{{ patterns[macro_nic.dhcp_pattern](macro_host, macro_nic, macro_filename) }}
{% else %}
  {% if macro_nic.mac is defined %}

  host {{macro_host}}-{{item}}-mac {
    option host-name "{{macro_host}}";
    hardware ethernet {{macro_nic.mac}};
    fixed-address {{macro_nic.ip4}};
    {% if macro_filename is not none %}
    filename "{{macro_filename}}";
    {% endif %}
    {% if macro_nic.dhcp_options is defined and macro_nic.dhcp_options %}{{ write_options(macro_nic.dhcp_options) }}{% endif %}
  }

  {%- endif %}
  {% if macro_nic.dhcp_client_identifier is defined %}

  host {{macro_host}}-{{item}}-dhcp-client-identifier {
    option host-name "{{macro_host}}";
    option dhcp-client-identifier {{macro_nic.dhcp_client_identifier}};
    fixed-address {{macro_nic.ip4}};
    {% if macro_filename is not none %}
    filename "{{macro_filename}}";
    {% endif %}
    {% if macro_nic.dhcp_options is defined and macro_nic.dhcp_options %}{{ write_options(macro_nic.dhcp_options) }}{% endif %}
  }

  {%- endif %}
  {% if macro_nic.host_identifier is defined %}

  host {{macro_host}}-{{item}}-host-identifier {
    option host-name "{{macro_host}}";
    host-identifier {{macro_nic.host_identifier}};
    fixed-address {{macro_nic.ip4}};
    {% if macro_filename is not none %}
    filename "{{macro_filename}}";
    {% endif %}
    {% if macro_nic.dhcp_options is defined and macro_nic.dhcp_options %}{{ write_options(macro_nic.dhcp_options) }}{% endif %}
  }

  {%- endif %}
  {% if macro_nic.match is defined %}{# Warning, only works in a shared network!! #}

  class "option_match_{{macro_host}}" {
    match if (
      {{macro_nic.match}}
    );
  }
  pool {
    option host-name "{{macro_host}}";
    allow members of "option_match_{{macro_host}}";
    range {{macro_nic.ip4}};
    {% if macro_filename is not none %}
    filename "{{macro_filename}}";
    {% endif %}
    {% if macro_nic.dhcp_options is defined and macro_nic.dhcp_options %}{{ write_options(macro_nic.dhcp_options) }}{% endif %}
  }

  {%- endif %}
{% endif %}
{%- endmacro %}

{###############################################################################
  Main template start point. Gather list of hosts to write.
###############################################################################}
{% if icebergs_system == true %}
  {% set range = groups[j2_current_iceberg] %}
  {% for host in groups[managements_group_name] %}
    {% if hostvars[host]['iceberg_master'] == j2_current_iceberg %}
{{ range.append(host) }}
    {% endif %}
  {% endfor %}
{% else %}
  {% set range = groups['all'] %}
{% endif %}

{###############################################################################
  Import external patterns if asked for. Expected to fail if file not present.
###############################################################################}
{% if advanced_dhcp_server_enable_patterns %}
{% import 'patterns.j2' as patterns without context %}
{% endif %}

{###############################################################################
  Loop over hosts to write, and write all interfaces in this network.
  First part is dedicated to calculate ipxe rom filename.
###############################################################################}
{% for host in range %}
  {% set current_hostvars = hostvars[host] %}{# buffer #}
  {% if current_hostvars['network_interfaces'] is defined and current_hostvars['network_interfaces'] is iterable %}
    {#- Define iPXE rom to use #}
    {% if current_hostvars['ep_ipxe_driver'] == 'snponly' %} {# Select driver first #}
      {% set ipxe_driver = 'snponly_' %}
    {% elif current_hostvars['ep_ipxe_driver'] == 'snp' %}
      {% set ipxe_driver = 'snp_' %}
    {% else %}{# Assume everything else is default driver #}
      {% set ipxe_driver = '' %}
    {% endif %}
    {% if current_hostvars['ep_hardware']['cpu']['architecture'] == 'arm64' %} {# Now select architecture #}
      {% set ipxe_architecture = 'arm64' %}
    {% else %}{# Assume everything else is x86_64 #}
      {% set ipxe_architecture = 'x86_64' %}
    {% endif %}
    {% if current_hostvars['ep_ipxe_embed'] == 'dhcpretry' %} {# Now select embed script #}
      {% set ipxe_embed = 'dhcpretry' %}
    {% else %}
      {% set ipxe_embed = 'standard' %}
    {% endif %}
    {% if current_hostvars['ep_ipxe_platform'] == 'efi' %} {# Finally, build file name depending of platform and previous parameters #}
      {% set ipxe_rom_filename = (ipxe_architecture + '/' + ipxe_embed + '_' + ipxe_driver + 'ipxe.efi') %}
    {% else %}{# Assume everything else is pcbios #}
      {% set ipxe_rom_filename = (ipxe_architecture + '/' + ipxe_embed + '_undionly.kpxe') %}
    {% endif -%}

    {%- for nic in current_hostvars['network_interfaces'] %}
      {% if (nic.network is defined and nic.network == item) and nic.ip4 is defined %}
{{ write_host(host, nic, ipxe_rom_filename) }}
      {% endif %}
    {% endfor -%}

    {%- if current_hostvars['bmc'] is defined %}
      {% set bmc_args = current_hostvars['bmc'] %}
      {% if (bmc_args.network is defined and not none) and (bmc_args.network == item) and (bmc_args.name is defined and not none) and (bmc_args.ip4 is defined and not none) %}
{{ write_host(bmc_args.name, bmc_args, None) }}
      {% endif %}
    {% endif %}

  {%- endif %}
{% endfor %}
