---
- name: include_vars ░ Gather OS specific variables
  # This task gathers variables defined in OS specific files.
  #
  # Search vars in:
  #  - <distribution>_<major>.yml    # eg. CentOS_8.yml
  #  - <os_family>_<major>.yml       # eg. RedHat_8.yml
  #  - <distribution>.yml            # eg. CentOS.yml
  #  - <os_family>.yml               # eg. RedHat.yml
  #
  # If no OS specific file is found, the role will default to vars/main.yml
  #
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.os_family }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}.yml"
        - "vars/{{ ansible_facts.os_family }}.yml"
      skip: true
  tags:
    - internal

- name: firewalld █ "Add services to firewall's {{ advanced_dns_server_firewall_zone | default('public') }} zone"
  firewalld:
    zone: "{{ advanced_dns_server_firewall_zone | default('public') }}"
    service: "{{ item }}"
    immediate: "yes"
    permanent: "yes"
    state: enabled
  when:
    - ansible_facts.os_family == "RedHat"
    - ep_firewall | default(false) | bool
  loop: "{{ advanced_dns_server_firewall_services_to_add }}"
  tags:
    - firewall

- name: "package █ Install {{ advanced_dns_server_packages_to_install | join(' ') }} packages"
  package:
    name: "{{ advanced_dns_server_packages_to_install }}"
    state: present
  tags:
    - package

# Master DNS is the dns_ip of primary management network
# (management_networks_naming + '1-1')
- name: set_fact ░ Set master DNS server - Get DNS IP
  set_fact:
    dns_master: "{{ networks[management_networks_naming+'1-1'].services_ip.dns_ip }}"
  when:
    - "dns_master is not defined"
    - "networks[j2_node_main_network].services_ip.dns_ip is defined"
  tags:
    - internal

- name: assert ░ Assert dns_master is defined
  assert:
    that:
      - dns_master is defined
    fail_msg: "'dns_master' must be defined. Please ensure that either 'dns_master' or
              networks[{{ management_networks_naming }}1-1].services_ip.dns_ip is
              defined and contains a valid IP address."
  tags:
    - internal

# If dns_ip is a list, pick the first value as master DNS
- name: set_fact ░ Set master DNS server - Pick first element of dns_ip
  set_fact:
    dns_master: "{{ dns_master | first }}"
  when:
    - "dns_master is iterable"
    - "dns_master is not string"
  tags:
    - internal

- name: file █ Create needed directory /var/named
  file:
    path: /var/named
    state: directory
    mode: 0755

- name: template █ Generate /etc/named.conf
  template:
    src: named.conf.j2
    dest: /etc/named.conf
    owner: root
    group: root
    mode: 0644
  notify: service █ Restart dns services
  tags:
    - template

- name: include_tasks ░ Configure Master DNS
  include_tasks: master.yml
  when: "dns_master in (network_interfaces | map(attribute='ip4') | list)"
  tags:
    - template
    - internal

- meta: flush_handlers

- name: "service █ Manage {{ advanced_dns_server_services_to_start | join(' ') }} state"
  service:
    name: "{{ item }}"
    enabled: "{{ (enable_services | bool) | ternary('yes','no') }}"
    state: "{{ (start_services | bool) | ternary('started', omit) }}"
  loop: "{{ advanced_dns_server_services_to_start }}"
  tags:
    - service
