---
- name: set_fact <|> Gather exporters to install
  ansible.builtin.set_fact:
    exporters_groups: "{{ (exporters_groups | default([])) + item.value }}"
  loop: "{{ prometheus_exporters_groups_to_scrape | dict2items}}"
  when: inventory_hostname in groups[item.key]

- name: group <|> Add exporters needed groups
  ansible.builtin.group:
    name: "{{ item.group }}"
    gid: "{{ item.gid | default(omit) }}"
    system: yes
    state: present
  loop: "{{ exporters_groups }}"
  when: item.group is defined

- name: user <|> Add exporters needed users
  ansible.builtin.user:
    name: "{{ item.user }}"
    shell: /bin/false
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    home: "{{ item.home | default('/var/lib/'+item.user) }}"
    system: yes
    state: present
  loop: "{{ exporters_groups }}"
  when: item.user is defined

- name: package <|> install exporters packages
  ansible.builtin.package:
    name: "{{ item.package }}"
    state: present
  loop: "{{ exporters_groups }}"
  when: item.package is defined and item.package is not none

- name: template <|> Generate exporters service file
  ansible.builtin.template:
    src: exporter.service.j2
    dest: "/etc/systemd/system/{{ item.service }}.service"
    owner: root
    group: root
    mode: 0755
  notify: systemd <|> Reload systemd configuration
  loop: "{{ exporters_groups }}"
  when: item.service is defined
  tags:
    - template

- name: file <|> Create exporters working directories
  ansible.builtin.file:
    path: "/etc/{{ item.service }}/"
    state: directory
    mode: 0755
    owner: "{{ item.user | default('root') }}"
    group: "{{ item.group | default('root') }}"
  loop: "{{ exporters_groups }}"
  when: item.service is defined

- name: meta <|> Run handler tasks
  ansible.builtin.meta: flush_handlers

- name: "firewalld <|> Open exporters ports into firewall's {{ prometheus_client_firewall_zone | default('public') }} zone"
  ansible.posix.firewalld:
    zone: "{{ prometheus_client_firewall_zone | default('public') }}"
    port: "{{ item.port }}/tcp"
    immediate: "yes"
    permanent: "yes"
    state: enabled
  loop: "{{ exporters_groups }}"
  when:
    - ansible_facts.os_family == "RedHat"
    - ep_firewall | default(false) | bool
    - item.port is defined
  tags:
    - firewall

- name: service <|> Manage exporters services
  ansible.builtin.service:
    name: "{{ item.service }}"
    enabled: "{{ (enable_services | bool) | ternary('yes','no') }}"
    state: "{{ (start_services | bool) | ternary('started', omit) }}"
  loop: "{{ exporters_groups }}"
  when: item.service is defined and item.service is not none
  tags:
    - service
