---
- name: dashboards <|> Download Opensource Grafana dashboards
  delegate_to: localhost
  run_once: true
  become: false
  block:
    - name: dashboards <|> Create local grafana dashboard directory
      ansible.builtin.tempfile:
        state: directory
      register: _tmp_dashboards
      changed_when: false
      check_mode: false

    # Use curl to solve issue #77
    - name: dashboards <|> Download grafana dashboard from grafana.net to local directory # noqa command-instead-of-module
      ansible.builtin.command: >
        curl --fail --compressed
        https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download
        -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json
      args:
        creates: "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
      register: _download_dashboards
      until: _download_dashboards is succeeded
      retries: 5
      delay: 2
      with_items: "{{ grafana_dashboards }}"
      when: grafana_dashboards | length > 0
      changed_when: false
      check_mode: false

    - name: dashboards <|> Set the correct data source name in the dashboard
      ansible.builtin.replace:
        dest: "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
        regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
        replace: '"{{ item.datasource }}"'
      changed_when: false
      with_items: "{{ grafana_dashboards }}"
      when: grafana_dashboards | length > 0

- name: dashboards <|> Import grafana dashboards through API
  ansible.builtin.uri:
    url: "{{ grafana_api_url }}/api/dashboards/db"
    user: "{{ grafana_security.admin_user }}"
    password: "{{ grafana_security.admin_password }}"
    force_basic_auth: true
    method: POST
    body_format: json
    body: >
      {
        "dashboard": {{ lookup("file", item) }},
        "overwrite": true,
        "message": "Updated by ansible"
      }
  no_log: true
  with_fileglob:
    - "{{ _tmp_dashboards.path }}/*"
    - "{{ grafana_dashboards_dir }}/*.json"

- name: dashboards <|> Register previously copied dashboards
  ansible.builtin.find:
    paths: "{{ grafana_data_dir }}/dashboards"
    hidden: true
    patterns:
      - "*.json"
  register: dashboards_present
  when: grafana_provisioning_synced

- name: dashboards <|> Import grafana dashboards
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"
    mode: 0640
  with_fileglob:
    - "{{ grafana_dashboards_dir }}/*.json"
  register: dashboards_copied
  notify: "provisioned dashboards changed"

- name: dashboards <|> Get dashboard lists
  ansible.builtin.set_fact:
    dashboards_present_list: "{{ dashboards_present | json_query('files[*].path') | default([]) }}"
    dashboards_copied_list: "{{ dashboards_copied | json_query('results[*].dest') | default([]) }}"
  when: grafana_provisioning_synced

- name: dashboards <|> Remove dashboards not present on deployer machine (synchronize)
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ dashboards_present_list | difference( dashboards_copied_list ) }}"
  when: grafana_provisioning_synced
