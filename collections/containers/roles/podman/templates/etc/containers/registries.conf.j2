{{ ansible_managed | comment }}
# For more information on this configuration file, see containers-registries.conf(5).
#
# There are multiple versions of the configuration syntax available, where the
# second iteration is backwards compatible to the first one. Mixing up both
# formats will result in an runtime error.
#
# The initial configuration format looks like this:
#
# Registries to search for images that are not fully-qualified.
# i.e. foobar.com/my_image:latest vs my_image:latest
[registries.search]
registries = [{{ podman_search_registries | map('regex_replace', '(.*)', "'\\1'") | join(',') }}]

# Registries that do not use TLS when pulling images or uses self-signed
# certificates.
[registries.insecure]
registries = [{{ podman_insecure_registries | map('regex_replace', '(.*)', "'\\1'") | join(',') }}]

# Blocked Registries, blocks the `docker daemon` from pulling from the blocked registry.  If you specify
# "*", then the docker daemon will only be allowed to pull from registries listed above in the search
# registries.  Blocked Registries is deprecated because other container runtimes and tools will not use it.
# It is recommended that you use the trust policy file /etc/containers/policy.json to control which
# registries you want to allow users to pull and push from.  policy.json gives greater flexibility, and
# supports all container runtimes and tools including the docker daemon, cri-o, buildah ...
# The atomic CLI `atomic trust` can be used to easily configure the policy.json file.
[registries.block]
registries = [{{ podman_blocked_registries | map('regex_replace', '(.*)', "'\1'") | join(',') }}]

# The second version of the configuration format allows to specify registry
# mirrors:
#
# [[registry]]
# # The main location of the registry
# location = "example.com"
#
# # If true, certs verification will be skipped and HTTP (non-TLS) connections
# # will be allowed.
# insecure = false
#
# # Prefix is used for matching images, and to translate one namespace to
# # another.  If `prefix = "example.com/foo"`, `location = "example.com"` and
# # we pull from "example.com/foo/myimage:latest", the image will effectively be
# # pulled from "example.com/myimage:latest".  If no Prefix is specified,
# # it defaults to the specified `location`. When a prefix is used, then a pull
# # without specifying the prefix is not possible any more.
# prefix = "example.com/foo"
#
# # If true, the registry can be used when pulling an unqualified image. If a
# # prefix is specified, unqualified pull is not possible any more.
# unqualified-search = false
#
# # If true, pulling from the registry will be blocked.
# blocked = false
#
# # All available mirrors of the registry.  The mirrors will be evaluated in
# # order during an image pull.  Furthermore it is possible to specify the
# # `insecure` flag per registry mirror, too.
# mirror = [
#     { location = "example-mirror-0.local", insecure = false },
#     { location = "example-mirror-1.local", insecure = true },
#     # It is also possible to specify an additional path within the `location`.
#     # A pull to `example.com/foo/image:latest` will then result in
#     # `example-mirror-2.local/path/image:latest`.
#     { location = "example-mirror-2.local/path" },
# ]
