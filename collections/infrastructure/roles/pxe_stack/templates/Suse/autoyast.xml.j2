#jinja2: lstrip_blocks: True
{% if hostvars[groups[os_profile][0]]['os_autoinstall_raw_file'] is defined %}
{{ hostvars[groups[os_profile][0]]['os_autoinstall_raw_file'] }}
{% else %}
<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">

  <add-on>
    <add_on_products config:type="list">
{% for repo in pxe_stack_suse_autoinstall_repositories %}
  {% if repo.media_url is defined and repo.media_url is string and repo.name is defined and repo.name is string %}
      <listentry>
        <media_url>{{ repo.media_url }}</media_url>
        <alias>{{ repo.name }}</alias>
        <ask_on_error config:type="boolean">false</ask_on_error>
        <confirm_license config:type="boolean">false</confirm_license>
        <name>{{ repo.name }}</name>
      </listentry>
  {% endif %}
{% endfor %}
    </add_on_products>
    <add_on_others config:type="list">
      <listentry>
        <media_url>http://download.opensuse.org/distribution/leap/$releasever/repo/oss/</media_url>
        <alias>repo-oss</alias>
        <name>Main Repository</name>
      </listentry>
      <listentry>
        <media_url>http://download.opensuse.org/update/leap/$releasever/oss/</media_url>
        <alias>repo-update</alias>
        <name>Main Update Repository</name>
      </listentry>
    </add_on_others>
  </add-on>

  <keyboard>
    <keymap>{{ (hostvars[groups[os_profile][0]]['os_keyboard_layout'] | default(pxe_stack_os_keyboard_layout)) | lower }}</keymap>
  </keyboard>

  <language>
    <language>{{ (hostvars[groups[os_profile][0]]['os_system_language'] | default(pxe_stack_os_system_language)) | replace('.UTF-8','') }}</language>
    <languages/>
  </language>

  <timezone>
    <hwclock>UTC</hwclock>
    <timezone>{{ pxe_stack_time_zone | default(bb_time_zone, true) | default('Europe/Brussels', true) }}</timezone>
  </timezone>


  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <managed config:type="boolean">true</managed>
  </networking>

  <software>
{% if (hostvars[groups[os_profile][0]]['os_operating_system']['distribution'] | default(pxe_stack_os_operating_system)) | lower == "sles" %}
    <products config:type="list">
      <product>SLES</product>
    </products>
{% endif %}
    <install_recommended config:type="boolean">true</install_recommended>
    <patterns config:type="list">
      <pattern>base</pattern>
    </patterns>
    <packages config:type="list">
      <package>openssh-server</package>
    {% if not pxe_stack_enable_root %}
      <package>sudo</package>
    {% endif %}
    {% if hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is defined and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is iterable and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is not string and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is not mapping %}
      {% for package in hostvars[groups[os_profile][0]]['os_autoinstall_packages'] %}
      <package>{{ package }}</package>
      {% endfor %}
    {% endif %}
    </packages>
  </software> 

  <bootloader>
    <loader_type>default</loader_type>
  </bootloader>

{{ hostvars[groups[os_profile][0]]['os_partitioning'] | default(pxe_stack_os_partitioning) | default(pxe_stack_suse_automatic_partitioning, true) }}

{% if pxe_stack_enable_root %}
 <users config:type="list">
  <user>
    <username>root</username>
    <user_password>{{ hostvars[groups[os_profile][0]]['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }}</user_password>
    <uid>0</uid>
    <gid>0</gid>
    <encrypted config:type="boolean">true</encrypted>
    <fullname>Root User</fullname>
    <authorized_keys config:type="list">
{% for ssh_key in (hostvars[groups[os_profile][0]]['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
      <listentry>{{ssh_key}}</listentry>
{% endfor %}
    </authorized_keys>
   </user>
 </users>
{% else %}
  <!-- disable root password and add ssh keys to sudo user -->
  <groups config:type="list">
    <group>
      <gid>{{ pxe_stack_sudo_user_gid }}</gid>
      <groupname>{{ pxe_stack_sudo_user }}</groupname>
    </group>
  </groups>
  <users config:type="list">
    <user>
      <username>root</username>
      <user_password>!</user_password>
      <encrypted config:type="boolean">true</encrypted>
    </user>
    <user>
      <username>{{ pxe_stack_sudo_user }}</username>
      <home>{{ pxe_stack_sudo_user_home }}</home>
      <uid>{{ pxe_stack_sudo_user_uid }}</uid>
      <gid>{{ pxe_stack_sudo_user_gid }}</gid>
      <user_password>{{ hostvars[groups[os_profile][0]]['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }}</user_password>
      <encrypted config:type="boolean">true</encrypted>
      <authorized_keys config:type="list">
  {% for ssh_key in (hostvars[groups[os_profile][0]]['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
        <listentry>{{ssh_key}}</listentry>
  {% endfor %}
      </authorized_keys>
    </user>
  </users>
{% endif %}

<services-manager>
  <default_target>multi-user</default_target>
  <services>
    <enable config:type="list">
      <service>sshd</service>
    </enable>
  </services>
</services-manager>

<scripts>
    <chroot-scripts config:type="list">
{% if not pxe_stack_enable_root %}
      <script>
        <chrooted config:type="boolean">true</chrooted>
        <filename>add_sles_sudo_rule.sh</filename>
        <interpreter>shell</interpreter>
        <source>
<![CDATA[
#!/bin/sh
echo "Defaults:sles !targetpw
{% if pxe_stack_sudo_is_passwordless %}
{{ pxe_stack_sudo_user }} ALL=(ALL,ALL) NOPASSWD: ALL" > /etc/sudoers.d/{{ pxe_stack_sudo_user }}
{% else %}
{{ pxe_stack_sudo_user }} ALL=(ALL,ALL) ALL" > /etc/sudoers.d/{{ pxe_stack_sudo_user }}
{% endif %}
]]>
          </source>
      </script>
{% endif %}
{% if (hostvars[groups[hw_profile][0]]['hw_preserve_efi_first_boot_device'] | default(pxe_stack_hw_preserve_efi_first_boot_device)) == true %}
      <script>
        <filename>post-no-chroot.sh</filename>
        <interpreter>shell</interpreter>
        <chrooted config:type="boolean">false</chrooted>
        <source><![CDATA[
#!/bin/sh -x

[ -d /sys/firmware/efi ] && efibootmgr -o $(efibootmgr | grep BootCurrent | cut -d" " -f2),$(efibootmgr | grep BootOrder | sed "s/BootOrder:\ //" | sed "s/$(efibootmgr | grep BootCurrent | cut -d" " -f2),//") || echo "Not an EFI system, skipping"

]]>
	</source>
      </script>
{% endif %}
      <script>
        <filename>post.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
#!/bin/sh -x

# Turn the kernel parameters into variables
# We are looking for next_server value
for I in `cat /proc/cmdline | tr " " "\n" | grep -E "^ipxe_next_server="` ; do eval $I; done

echo "All went well, we can inform next-server we succeeded"
curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$(hostname -s)&boot=disk"

]]>
        </source>
      </script>
{% if (hostvars[groups[os_profile][0]]['os_operating_system']['distribution'] | default(pxe_stack_os_operating_system.distribution)) | lower == "opensuse" and not pxe_stack_preserve_repositories %}
      <script>
        <chrooted config:type="boolean">true</chrooted>
        <filename>chroot-post.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
#!/bin/bash
sed -i "s/enabled=1/enabled=0/" /etc/zypp/repos.d/repo-*
]]>
        </source>
      </script>
{% endif %}
{% for script in pxe_stack_os_autoinstall_custom_scripts %}
  {% if script.name is defined and script.name is string and script.content is defined and script.content is string %}
      <script>      
        <filename>{{ script.name }}.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
{{ script.content }}
]]>
        </source>
      </script>
  {% endif %}
{% endfor %}
    </chroot-scripts>
   <init-scripts config:type="list">
      <script>
        <filename>removeisorepo.sh</filename>
        <source><![CDATA[
#!/bin/sh -x
# Remove iso repository (it contains netboots string inside its URL)
zypper rr $(zypper lr -d | grep netboots | awk -F '' '{print $1}')
]]>
        </source>
        </script>
    </init-scripts>
  </scripts>

<general>
  <mode>
    <confirm config:type="boolean">false</confirm>
  </mode>
  <signature-handling>
    <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
    <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
    <accept_non_trusted_gpg_key config:type="boolean">true</accept_non_trusted_gpg_key>
    <import_gpg_key config:type="boolean">true</import_gpg_key>
  </signature-handling>
 </general>

{% set repo_proxy = (hostvars[groups[os_profile][0]]['os_pxe_repository_proxy'] | default(pxe_stack_os_pxe_repository_proxy, true) | default(none, true)) %}
{% if repo_proxy is not none %}
  <proxy>
    <enabled config:type="boolean">true</enabled>
    <ftp_proxy>{{ repo_proxy }}</ftp_proxy>
    <http_proxy>{{ repo_proxy }}</http_proxy>
    {% if "@" in repo_proxy %}
    <proxy_password>{{ ((repo_proxy | replace("http://", "") | split("@"))[0] | split(":"))[1] }}</proxy_password>
    <proxy_user>{{ ((repo_proxy | replace("http://", "") | split("@"))[0] | split(":"))[0] }}</proxy_user>
    {% endif %}
  </proxy>
{% endif %}

{{ hostvars[groups[os_profile][0]]['os_autoinstall_raw_content'] | default(pxe_stack_os_autoinstall_raw_content) }}

</profile>

{% endif %}
