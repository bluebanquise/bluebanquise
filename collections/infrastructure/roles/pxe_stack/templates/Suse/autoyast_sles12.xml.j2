#jinja2: lstrip_blocks: True
<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">

  <add-on>
    <add_on_products config:type="list">
{% for repo in pxe_stack_suse_autoinstall_repositories %}
  {% if repo.media_url is defined and repo.media_url is string and repo.name is defined and repo.name is string %}
      <listentry>
        <media_url>{{ repo.media_url }}</media_url>
        <alias>{{ repo.name }}</alias>
        <ask_on_error config:type="boolean">false</ask_on_error>
        <confirm_license config:type="boolean">false</confirm_license>
        <name>{{ repo.name }}</name>
      </listentry>
  {% endif %}
{% endfor %}
    </add_on_products>
  </add-on>

  <keyboard>
    <keymap>{{ (hostvars[groups[item][0]]['ep_keyboard_layout'] | default(pxe_stack_ep_keyboard_layout)) | lower }}</keymap>
  </keyboard>

  <language>
    <language>{{ (hostvars[groups[item][0]]['ep_system_language'] | default(pxe_stack_ep_system_language)) | replace('.UTF-8','') }}</language>
    <languages/>
  </language>

  <timezone>
    <hwclock>UTC</hwclock>
    <timezone>{{ bb_time_zone | default(pxe_stack_time_zone) }}</timezone>
  </timezone>

  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <managed config:type="boolean">true</managed>
  </networking>

  <software>
    <install_recommended config:type="boolean">true</install_recommended>
    <patterns config:type="list">
      <pattern>base</pattern>
    </patterns>
    <packages config:type="list">
      <package>python36</package>
      <package>openssh</package>
      <package>NetworkManager</package>
    </packages>
  </software> 

  <bootloader>
    <loader_type>default</loader_type>
  </bootloader>

{{ hostvars[groups[item][0]]['ep_partitioning'] | default(pxe_stack_ep_partitioning) | default(pxe_stack_suse_automatic_partitioning, true) }}

 <users config:type="list">
  <user>
    <username>root</username>
    <user_password>{{ hostvars[groups[item][0]]['ep_admin_password_sha512'] | default(pxe_stack_ep_admin_password_sha512) }}</user_password>
    <uid>0</uid>
    <gid>0</gid>
    <encrypted config:type="boolean">true</encrypted>
    <fullname>Root User</fullname>
    <authorized_keys config:type="list">
{% for ssh_key in (hostvars[groups[item][0]]['ep_admin_ssh_keys'] | default(pxe_stack_ep_admin_ssh_keys)) %}
      <listentry>{{ssh_key}}</listentry>
{% endfor %}
    </authorized_keys>
   </user>
 </users>

<services-manager>
  <default_target>multi-user</default_target>
  <services>
    <enable config:type="list">
      <service>NetworkManager</service>
      <service>sshd</service>
    </enable>
    <disable config:type="list">
      <service>wicked</service>
    </disable>
  </services>
</services-manager>

<scripts>
    <chroot-scripts config:type="list">
{% if (hostvars[groups[item][0]]['ep_preserve_efi_first_boot_device'] | default(pxe_stack_ep_preserve_efi_first_boot_device)) == true %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>post-no-chroot.sh</filename>
        <interpreter>shell</interpreter>
        <chrooted config:type="boolean">false</chrooted>
        <source><![CDATA[
#!/bin/sh

[ -d /sys/firmware/efi ] && efibootmgr -o $(efibootmgr | grep BootCurrent | cut -d" " -f2),$(efibootmgr | grep BootOrder | sed "s/BootOrder:\ //" | sed "s/$(efibootmgr | grep BootCurrent | cut -d" " -f2),//") || echo "Not an EFI system, skipping"

]]>
	</source>
      </script>
{% endif %}
      <script>
        <debug config:type="boolean">true</debug>
        <filename>post.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
#!/bin/sh

# Turn the kernel parameters into variables
# We are looking for next_server value
for I in `cat /proc/cmdline | tr " " "\n" | grep -E "^ipxe_next_server="` ; do eval $I; done

echo "All went well, we can inform next-server we succeeded"
curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$(hostname -s)&boot=disk"

]]>
        </source>
      </script>
{% for script in pxe_stack_ep_autoinstall_custom_scripts %}
  {% if script.name is defined and script.name is string and script.content is defined and script.content is string %}
      <script>      
        <filename>{{ script.name }}.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
{{ script.content }}
]]>
        </source>
      </script>
  {% endif %}
{% endfor %}
    </chroot-scripts>
  </scripts>

 <general>
  <mode>
    <confirm config:type="boolean">false</confirm>
  </mode>
  <signature-handling>
    <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
    <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
    <accept_non_trusted_gpg_key config:type="boolean">true</accept_non_trusted_gpg_key>
    <import_gpg_key config:type="boolean">true</import_gpg_key>
  </signature-handling>
 </general>

</profile>





