#### Blue Banquise file ####
## {{ ansible_managed }}

{% if hostvars[groups[os_profile][0]]['os_autoinstall_raw_file'] is defined %}
{{ hostvars[groups[os_profile][0]]['os_autoinstall_raw_file'] }}
{% else %}

##### General settings

# Custom scripts or kickstart content
{% if (hostvars[groups[os_profile][0]]['os_autoinstall_custom_content'] | default(pxe_stack_os_autoinstall_custom_content)) is not none %}
{{ (hostvars[groups[os_profile][0]]['os_autoinstall_custom_content'] | default(pxe_stack_os_autoinstall_custom_content)) }}
{% endif %}

# Do not use GUI
text

# Run the Setup Agent on first boot
firstboot --enable

# System keyboard layout
keyboard --vckeymap={{ (hostvars[groups[os_profile][0]]['os_keyboard_layout'] | default(pxe_stack_os_keyboard_layout)) | lower }} --xlayouts='{{ (hostvars[groups[os_profile][0]]['os_keyboard_layout'] | default(pxe_stack_os_keyboard_layout)) | lower }}'

# System language
lang {{ hostvars[groups[os_profile][0]]['os_system_language'] | default(pxe_stack_os_system_language) }}

# System timezone
{% if (hostvars[groups[os_profile][0]]['os_operating_system']['distribution_major_version'] | default(pxe_stack_os_operating_system.distribution_major_version) ) | int < 9 %}
timezone {{ pxe_stack_time_zone | default(bb_time_zone, true) | default('Europe/Brussels', true) }} --isUtc
{% else %}
timezone {{ pxe_stack_time_zone | default(bb_time_zone, true) | default('Europe/Brussels', true) }} --utc
{% endif %}

# Reboot after installation
reboot

##### Authentication settings

{% if (hostvars[groups[os_profile][0]]['os_operating_system']['distribution_major_version'] | default(pxe_stack_os_operating_system.distribution_major_version) ) | int < 8 %}
# Define authentication method (sha512)
auth --enableshadow --passalgo=sha512
{% endif %}

{% if not pxe_stack_enable_root %}
rootpw --lock
user --name={{ pxe_stack_sudo_user }} --homedir={{ pxe_stack_sudo_user_home }} --iscrypted --password={{ hostvars[groups[os_profile][0]]['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }} --uid {{ pxe_stack_sudo_user_uid }} --gid {{ pxe_stack_sudo_user_gid }}
{% else %}
# Root password (sha512)
rootpw --iscrypted {{ hostvars[groups[os_profile][0]]['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }}
{% endif %}

##### Network

# Network settings
network --bootproto=dhcp --ipv6=auto --activate
network --hostname=localhost.localdomain

##### Security

# SELinux
{% if (hostvars[groups[os_profile][0]]['os_access_control'] | default(pxe_stack_os_access_control)) in ['enforcing', 'permissive'] %}
selinux --{{ hostvars[groups[os_profile][0]]['os_access_control'] | default(pxe_stack_os_access_control) }}
{% else %}
selinux --disabled
{% endif %}

# Firwalld
{% if (hostvars[groups[os_profile][0]]['os_firewall'] | default(pxe_stack_os_firewall)) == true %}
firewall --enabled
{% else %}
firewall --disabled
{% endif %}


##### Partitionning
# WARNING! Note that in BlueBanquise, if nothing was set for partitioning,
# a potentially destructive default will be chosen!

# Bootloader configuration
bootloader --append="{{ hostvars[groups[os_profile][0]]['os_kernel_parameters'] | default(pxe_stack_os_kernel_parameters) }} {{ hostvars[groups[hw_profile][0]]['hw_kernel_parameters'] | default(pxe_stack_hw_kernel_parameters) }} " --location=mbr

# Partitioning
{{ hostvars[groups[os_profile][0]]['os_partitioning'] | default(pxe_stack_os_partitioning) | default(pxe_stack_redhat_automatic_partitioning, true) }}

##### Packages
%packages
@core
curl
{% if not pxe_stack_enable_root %}
sudo
{% endif %}
{% if hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is defined and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is iterable and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is not string and hostvars[groups[os_profile][0]]['os_autoinstall_packages'] is not mapping %}
{% for package in hostvars[groups[os_profile][0]]['os_autoinstall_packages'] %}
{{ package }}
{% endfor %}
{% endif %}
%end


# This EFI first boot order restoration trick is from stacki, not from me.
# See https://github.com/Teradata/stacki for more details
{% if (hostvars[groups[hw_profile][0]]['hw_preserve_efi_first_boot_device'] | default(pxe_stack_hw_preserve_efi_first_boot_device)) == true %}
%post --interpreter /bin/bash --log /root/bluebanquise_efi_post-install.log
[ -d /sys/firmware/efi ] && efibootmgr -o $(efibootmgr | grep BootCurrent | cut -d" " -f2),$(efibootmgr | grep BootOrder | sed "s/BootOrder:\ //" | sed "s/$(efibootmgr | grep BootCurrent | cut -d" " -f2),//") || echo "Not an EFI system, skipping"
%end
{% endif %}

# Main post, ssh keys and inform server auto install is done
%post --interpreter /bin/bash --log /root/bluebanquise_main_post-install.log
set -x

{% if pxe_stack_enable_root %}

# Ensure root login is enabled via ssh
sed -i 's/^.*PermitRootLogin.*$/PermitRootLogin\ yes/' /etc/ssh/sshd_config
# Add ssh keys from ssh_keys list
mkdir /root/.ssh
cat << xxEOFxx >> /root/.ssh/authorized_keys
{% for ssh_key in (hostvars[groups[os_profile][0]]['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
{{ ssh_key }}
{% endfor %}
xxEOFxx
# Ensure SELinux configuration is ok, best effort
restorecon -R -v /root/.ssh

{% else %}
# Ensure no root login is enabled via ssh
sed -i 's/^.*PermitRootLogin.*$/PermitRootLogin\ no/' /etc/ssh/sshd_config
# Add ssh keys from ssh_keys list
mkdir {{ pxe_stack_sudo_user_home }}/.ssh
cat << xxEOFxx >> {{ pxe_stack_sudo_user_home }}/.ssh/authorized_keys
{% for ssh_key in (hostvars[groups[os_profile][0]]['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
{{ ssh_key }}
{% endfor %}
xxEOFxx
chown -R {{pxe_stack_sudo_user}}:{{pxe_stack_sudo_user}} {{ pxe_stack_sudo_user_home }}/.ssh
# Ensure SELinux configuration is ok, best effort
restorecon -R -v {{ pxe_stack_sudo_user_home }}/.ssh
# Set admin user as sudo
{% if pxe_stack_sudo_is_passwordless %}
echo '{{ pxe_stack_sudo_user }} ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers.d/{{ pxe_stack_sudo_user }}
{% else %}
echo '{{ pxe_stack_sudo_user }} ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/{{ pxe_stack_sudo_user }}
{% endif %}

{% endif %}

# Turn the kernel parameters into variables
# We are looking for next_server value
for I in `cat /proc/cmdline | tr " " "\n" | grep -E "^(node_hostname|ipxe_next_server)="` ; do eval $I; done

echo "All went well, we can inform next-server we succeeded"
curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$node_hostname&boot=disk"

{% if not pxe_stack_preserve_repositories %}
rm -r /var/cache/yum/*
rm -f /etc/yum.repos.d/*
{% endif %}
set +x
%end

{{ hostvars[groups[os_profile][0]]['os_autoinstall_raw_content'] | default(pxe_stack_os_autoinstall_raw_content) }}

{% endif %}
