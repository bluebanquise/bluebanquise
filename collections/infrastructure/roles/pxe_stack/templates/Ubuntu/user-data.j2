#jinja2: lstrip_blocks: "True"
#cloud-config

#### Blue Banquise file ####
## {{ ansible_managed }}
{% if equipment['os']['os_autoinstall_raw_file'] is defined %}
{{ equipment['os']['os_autoinstall_raw_file'] }}
{% else %}

autoinstall:
  {% if (equipment['os']['os_autoinstall_custom_content'] | default(pxe_stack_os_autoinstall_custom_content, true)) is not none %}
# Custom content
{{ (equipment['os']['os_autoinstall_custom_content'] | default(pxe_stack_os_autoinstall_custom_content, true)) | indent(2, True) }}
  {% endif %}
  {% if equipment['os']['os_autoinstall_packages'] is defined and equipment['os']['os_autoinstall_packages'] is iterable and equipment['os']['os_autoinstall_packages'] is not string and equipment['os']['os_autoinstall_packages'] is not mapping %}
  packages:
    {% for package in equipment['os']['os_autoinstall_packages'] %}
    - {{ package }}
    {% endfor %}
  {% endif %}
  {% if (equipment['os']['os_pxe_repository_proxy'] | default(pxe_stack_os_pxe_repository_proxy, true) | default(none, true)) is not none %}
  proxy: {{ equipment['os']['os_pxe_repository_proxy'] | default(pxe_stack_os_pxe_repository_proxy, true) }}
  {% endif %}
  version: 1
  apt:
    geoip: false
    preserve_sources_list: {{ pxe_stack_preserve_repositories }}
  keyboard: {layout: {{ (equipment['os']['os_keyboard_layout'] | default(pxe_stack_os_keyboard_layout)) | lower }}, toggle: null, variant: ''}
  locale: {{ equipment['os']['os_system_language'] | default(pxe_stack_os_system_language) }}
  timezone: {{ pxe_stack_time_zone | default(bb_time_zone, true) | default('Europe/Brussels', true) }}
  user-data:
  {% if not pxe_stack_enable_root %}
    users:
      - name: {{ pxe_stack_sudo_user }}
        homedir: {{ pxe_stack_sudo_user_home }}
      {% if (equipment['os']['os_operating_system']['distribution_major_version'] | default(pxe_stack_os_operating_system.distribution_major_version) ) | int == 24 %}
      {# Format is not exactly the same for Ubuntu 20/22 and Ubuntu 24 #}
        ssh_authorized_keys:
        {% for ssh_key in (equipment['os']['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
          - {{ ssh_key }}
        {% endfor %}
        {% if pxe_stack_sudo_is_passwordless %}
        sudo: 'ALL=(ALL:ALL) NOPASSWD:ALL'
        {% else %}
        sudo: 'ALL=(ALL:ALL) ALL'
        {% endif %}
      {% else %}
        ssh-authorized-keys:
        {% for ssh_key in (equipment['os']['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
          - {{ ssh_key }}
        {% endfor %}
        {% if pxe_stack_sudo_is_passwordless %}
        sudo: ['ALL=(ALL:ALL) NOPASSWD:ALL']
        {% else %}
        sudo: ['ALL=(ALL:ALL) ALL']
        {% endif %}
      {% endif %}
        groups: sudo
        shell: /bin/bash
        passwd: "{{ equipment['os']['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }}"
    disable_root: true
  {% else %}
    disable_root: false
  {% endif %}
  ssh:
    install-server: true
    allow-pw: true

{{ (equipment['os']['os_partitioning'] | default(equipment['hw']['hw_partitioning'], true) | default(pxe_stack_os_partitioning, true) | default(pxe_stack_ubuntu_automatic_partitioning, true)) | indent(2, True) }}
 
  late-commands:
  {% if pxe_stack_enable_root %}
    - mkdir /target/root/.ssh
    {% for ssh_key in (equipment['os']['os_admin_ssh_keys'] | default(pxe_stack_os_admin_ssh_keys)) %}
    - echo "{{ ssh_key }}" >> /target/root/.ssh/authorized_keys
    {% endfor %}
    - sed -i "s/^#PermitRootLogin.*\$/PermitRootLogin yes/g" /target/etc/ssh/sshd_config
    - sed -i 's|^root:.:|root:{{ equipment['os']['os_admin_password_sha512'] | default(pxe_stack_os_admin_password_sha512) }}:|' /target/etc/shadow
  {% else %}
{# While this is stupid, there is currently no way in cloudinit to set user uid/gid when creating it, we have to patch that here.#}
    - curtin in-target --target=/target -- sh -c 'groupadd -g {{ pxe_stack_sudo_user_gid }} {{ pxe_stack_sudo_user }}'
    - curtin in-target --target=/target -- sh -c 'useradd -d {{ pxe_stack_sudo_user_home }} -m -g {{ pxe_stack_sudo_user_gid }} -u {{ pxe_stack_sudo_user_uid }} -s /bin/bash {{ pxe_stack_sudo_user }}'
  {% endif %}
  {% if not pxe_stack_preserve_repositories %}
    - echo " " > /target/etc/apt/sources.list
  {% endif %}
  {% if (equipment['hw']['hw_preserve_efi_first_boot_device'] | default(pxe_stack_hw_preserve_efi_first_boot_device)) == true %}
    - sh -c '[ -d /sys/firmware/efi ] && efibootmgr -o $(efibootmgr | grep BootCurrent | cut -d" " -f2),$(efibootmgr | grep BootOrder | sed "s/BootOrder:\ //" | sed "s/$(efibootmgr | grep BootCurrent | cut -d" " -f2),//") || echo "Not an EFI system, skipping"'
  {% endif %}
    - curtin in-target --target=/target -- sh -c 'for I in `cat /proc/cmdline | tr " " "\n" | grep -E "^(node_hostname|ipxe_next_server)="` ; do eval $I; done; curl -s -k http://$ipxe_next_server/cgi-bin/bootswitch.cgi --data "node=$node_hostname&boot=disk"'

{% endif %}