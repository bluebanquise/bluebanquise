#!/usr/bin/env python3

# ██████╗ ██╗     ██╗   ██╗███████╗██████╗  █████╗ ███╗   ██╗ ██████╗ ██╗   ██╗██╗███████╗███████╗
# ██╔══██╗██║     ██║   ██║██╔════╝██╔══██╗██╔══██╗████╗  ██║██╔═══██╗██║   ██║██║██╔════╝██╔════╝
# ██████╔╝██║     ██║   ██║█████╗  ██████╔╝███████║██╔██╗ ██║██║   ██║██║   ██║██║███████╗█████╗
# ██╔══██╗██║     ██║   ██║██╔══╝  ██╔══██╗██╔══██║██║╚██╗██║██║▄▄ ██║██║   ██║██║╚════██║██╔══╝
# ██████╔╝███████╗╚██████╔╝███████╗██████╔╝██║  ██║██║ ╚████║╚██████╔╝╚██████╔╝██║███████║███████╗
# ╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚══▀▀═╝  ╚═════╝ ╚═╝╚══════╝╚══════╝
#
# 2.0.0: Full rewamp. Benoît Leveugle <benoit.leveugle@gmail.com>
# 1.3.7: Improved disklessset checks. Thiago Cardozo <thiago_cardozo@yahoo.com.br>
# 1.3.6: Fix permissions. Benoit Leveugle <benoit.leveugle@gmail.com>
# 1.3.5: Stop tool if cannot umount image. Benoit Leveugle <benoit.leveugle@gmail.com>
# 1.3.4: Removed dependency exclusions that break image builds. Thiago Cardozo <thiago_cardozo@yahoo.com.br>
# 1.3.3: Improve yaml loader. Benoit Leveugle <benoit.leveugle@gmail.com>
# 1.3.2: Reintegrate missing devs. Benoit Leveugle <benoit.leveugle@gmail.com>
# 1.3.1: Fix yaml loader issue. Johnny Keats <johnny.keats@outlook.com>
# 1.3.0: Role update. David Pieters <davidpieters22@gmail.com>
# 1.2.0: Role update. David Pieters <davidpieters22@gmail.com>, Benoit Leveugle <benoit.leveugle@gmail.com>
# 1.1.0: Role update. Benoit Leveugle <benoit.leveugle@gmail.com>, Bruno Travouillon <devel@travouillon.fr>
# 1.0.0: Role creation. Benoit Leveugle <benoit.leveugle@gmail.com>
# https://github.com/bluebanquise/bluebanquise - MIT license

"""
Notes
How to create bootstrap images:

use docker, bind /tmp:/tmp, and do a dnf install in a folder
add metadata.yaml file at root of this image folder
Then on main OS,
      cd /tmp/monimagerhel9/
  450  shopt -s dotglob
  451  sudo tar czf /tmp/almalinux_9_minimal.tar.gz *
  452  shopt -u dotglob

need to install sudo, openssh-server (sshd), and ensure dracut and dracut-network + file for modules

bluebanquise@mgt1:/tmp$ cat el9/etc/dracut.conf.d/bluebanquise.conf
add_dracutmodules+=" nfs livenet dmsquash-live "
#add_drivers+=" xfs "
hostonly=no
show_modules=yes
bluebanquise@mgt1:/tmp$

"""

import os
import logging
import yaml
import requests
import shutil
import subprocess
import crypt


# Colors, from https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def display_image_metadata(image_metadata):
    """ Iteratively display an image metadata"""
    print("   └──── name: " + image_metadata['name'])
    for k, v in image_metadata.items():
        if k != 'name' and k!= 'description':
            print("          ├─ " + k + ": " + str(v))
    print("          └─ description: " + image_metadata['description'])


def protected_os_system(raw_command):

    try:
        child = subprocess.Popen(raw_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        stdout, stderr = child.communicate()
        rc = child.returncode
    except subprocess.CalledProcessError as e:
        print(" Subprocess Execution failed: ", e)
        raise OSError(" Fatal error, exiting.")
    if str(rc) != "0":
        print(bcolors.FAIL + "\n ERROR: command" + raw_command + " failed :(" + bcolors.ENDC)
        print(" Report:")
        print(" Error code: " + str(rc))
        print(" stdout: " + str(stdout))
        print(" stderr: " + str(stderr))
        raise OSError(" Fatal error, exiting.")
    return 0


print("""\

                (o_
      (o_  (o_  //\\
      (/)_ (/)_ V_/_
   BlueBanquise diskless
   v1.0.0 - beta
   https://github.com/bluebanquise/bluebanquise/

""")

# Enable logging
loglevel = logging.INFO
logging.basicConfig(format='[%(levelname)s] %(message)s', level=loglevel)


print(" Welcome on BlueBanquise diskless tool.")
print(" This tool is made to simplify diskless provisioning.")
print(" Note that an help is available in main menu.\n")

logging.info(bcolors.OKBLUE + 'Checking folders exist...' + bcolors.ENDC)
if not os.path.exists("/var/lib/bluebanquise/diskless/bootstrap_images"):
    logging.info(bcolors.OKBLUE + 'Creating /var/lib/bluebanquise/diskless/bootstrap_images/ folder.' + bcolors.ENDC)
    protected_os_system("mkdir -p /var/lib/bluebanquise/diskless/bootstrap_images/tmp/")
if not os.path.exists("/nfs/diskless"):
    logging.info(bcolors.OKBLUE + 'Creating /nfs/diskless folder.' + bcolors.ENDC)
    protected_os_system("mkdir -p /nfs/diskless")
if not os.path.exists("/var/www/html/pxe/diskless"):
    logging.info(bcolors.OKBLUE + 'Creating /var/www/html/pxe/diskless/ folder.' + bcolors.ENDC)
    protected_os_system("mkdir -p /var/www/html/pxe/diskless/")

logging.info(bcolors.OKBLUE + 'Checking if user has sufficient rights...' + bcolors.ENDC)
if not os.environ.get("SUDO_UID") and os.geteuid() != 0:
    raise PermissionError("You need to run this script with sudo or as root.")
    quit(1)

# ALLOW CUSTOM FOLDERS
# SUPPORT ERRORS

while True:

    print("\n == Main menu, please select an action to perform ==")
    print(" 1 - List available images")
    print(" 2 - Load a new \033[94mbootstrap\033[0m image")
    print(" 3 - Create a new \033[92mreference\033[0m image from \033[94mbootstrap\033[0m image")
    print(" 4 - Link a \033[92mreference\033[0m image to a node for temporary NFS diskless")
    print(" 5 - Update a \033[92mreference\033[0m image default kernel")
    print(" 6 - Clone a \033[92mreference\033[0m image")
    print(" 7 - Convert a \033[92mreference\033[0m image to a \033[91mlive\033[0m image")
    print(" 8 - Delete an image")
    print(" 9 - Get help")
    print(" 10 - Exit tool")

    main_action = input(" -->: ")

    if main_action == "1":

        # Gather bootstrap images
        gathered_bootstrap = []
        logging.info(bcolors.OKBLUE + 'Checking bootstrap images in /var/lib/bluebanquise/diskless/bootstrap_images/' + bcolors.ENDC)
        for it in os.scandir("/var/lib/bluebanquise/diskless/bootstrap_images/"):
            if it.is_dir() and it.name != "tmp":
                with open(it.path + "/metadata.yaml", "r") as file:
                    gathered_bootstrap.append(yaml.safe_load(file))

        if len(gathered_bootstrap) > 0:
            print("")
            print(" BOOTSTRAP IMAGES:")
            print("   │ ")
            for image in gathered_bootstrap:
                display_image_metadata(image)
        else:
            print(" BOOTSTRAP IMAGES: none found")

        # Gather reference images
        gathered_reference = []
        logging.info(bcolors.OKBLUE + 'Checking reference images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
        for it in os.scandir("/var/www/html/pxe/diskless/"):
            if it.is_dir():
                with open(it.path + "/metadata.yaml", "r") as file:
                    image_metadata = yaml.safe_load(file)
                    if image_metadata['type'] == "nfs_reference":
                        gathered_reference.append(image_metadata)

        if len(gathered_reference) > 0:
            print("")
            print(" REFERENCE IMAGES:")
            print("   │ ")
            for image in gathered_reference:
                display_image_metadata(image)
        else:
            print(" REFERENCE IMAGES: none found")

        # Gather live images
        gathered_live = []
        logging.info(bcolors.OKBLUE + 'Checking live images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
        for it in os.scandir("/var/www/html/pxe/diskless/"):
            if it.is_dir():
                with open(it.path + "/metadata.yaml", "r") as file:
                    image_metadata = yaml.safe_load(file)
                    if image_metadata['type'] == "live":
                        gathered_live.append(image_metadata)

        if len(gathered_live) > 0:
            print("")
            print(" LIVE IMAGES:")
            print("   │ ")
            for image in gathered_live:
                display_image_metadata(image)
        else:
            print(" LIVE IMAGES: none found")

    if main_action == "2":

#        try:

            print("\n\n== bootstrap images menu ==")
            print(" Note: you can find pre-made images at http://bluebanquise.com/diskless/")
            print(" Please select source of bootstrap image:")
            print(" 1 - From local file")
            print(" 2 - From http URL")

            source_action = input(" -->: ")

            protected_os_system("mkdir -p /var/lib/bluebanquise/diskless/bootstrap_images/tmp/")
            logging.info(bcolors.OKBLUE + 'Image will be temporary stored inside /var/lib/bluebanquise/diskless/bootstrap_images/tmp/' + bcolors.ENDC)

            if source_action == "1":
                print(" Please enter bootstrap image ABSOLUTE path of tar.gz archive:")
                image_path = input(" -->: ")
                image_source_file_name = image_path.split('/')[-1]
                logging.info(bcolors.OKBLUE + 'Copying image from ' + image_path + ', please be patient...' + bcolors.ENDC)
                protected_os_system("cp " + image_path + " /var/lib/bluebanquise/diskless/bootstrap_images/tmp/" + image_source_file_name)

            elif source_action == "2":
                print(" Please enter bootstrap image URL of tar.gz archive:")
                image_url = input(" -->: ")
                image_source_file_name = image_url.split('/')[-1]
                logging.info(bcolors.OKBLUE + 'Downloading image from ' + image_url + ', please be patient...' + bcolors.ENDC)
                response = requests.get(image_url)
                with open("/var/lib/bluebanquise/diskless/bootstrap_images/tmp/" + image_source_file_name, 'wb') as file:
                    file.write(response.content)

            logging.info(bcolors.OKBLUE + 'Extracting image metadata...' + bcolors.ENDC)
            protected_os_system("rm -f /var/lib/bluebanquise/diskless/bootstrap_images/tmp/metadata.yaml")
            protected_os_system("tar xzf /var/lib/bluebanquise/diskless/bootstrap_images/tmp/" + image_source_file_name + " -C /var/lib/bluebanquise/diskless/bootstrap_images/tmp/ metadata.yaml")
            with open("/var/lib/bluebanquise/diskless/bootstrap_images/tmp/metadata.yaml", "r") as file:
                image_metadata = yaml.safe_load(file)
            print(" Found following metadata for new image:")
            display_image_metadata(image_metadata)

            logging.info(bcolors.OKBLUE + 'Storing image...' + bcolors.ENDC)
            protected_os_system("mkdir -p /var/lib/bluebanquise/diskless/bootstrap_images/" + image_metadata['name'])
            protected_os_system("mv /var/lib/bluebanquise/diskless/bootstrap_images/tmp/" + image_source_file_name + " /var/lib/bluebanquise/diskless/bootstrap_images/" + image_metadata['name'] + "/image.tar.gz")
            protected_os_system("mv /var/lib/bluebanquise/diskless/bootstrap_images/tmp/metadata.yaml /var/lib/bluebanquise/diskless/bootstrap_images/" + image_metadata['name'] + "/metadata.yaml")
            print("\n Bootstrap image " + image_metadata['name'] + " is now ready to be used :)")

#        except:
#            print(" \nSomething went wrong :(")
#            print(" Please investigate displayed logs.")
#            print(" Note that the tool do not remove any temporary files before success, allowing you to debug.")

        #     logging.info(bcolors.OKBLUE + 'Getting list from http://raphael.sphenisc.com...' + bcolors.ENDC)
        #     url_res = requests.get(url= "http://raphael.sphenisc.com:80/bluebanquise/diskless/images.yaml")
        #     bootstrap_images_list = yaml.safe_load(url_res.content)

        # # images:
        # #   - name: almalinux_9_minimal
        # #     version: 9.1
        # #     description: |
        # #       AlmaLinux 9 minimal
        # #     architecture: x86_64
        # #     kernel: 5.14.0-162.12.1.el9_1.x86_64
        # #     packager: Oxedions <oxedions@gmail.com>
        # #     url: http://localhost:8000/almalinux_9_minimal.tar.gz
        # #     packaging_date: 26/02/2023 (JJ/MM/AAAA)

        #     print("")
        #     print(" Available bootstrap images to download:")
        #     print("   │ ")
        #     for image in bootstrap_images_list['images']:
        #         print("   ├──── name: " + image['name'])
        #         print("   │      ├─ version: " + str(image['version']))
        #         print("   │      ├─ version: " + str(image['version']))
        #         print("   │      ├─ architecture: " + image['architecture'])
        #         print("   │      ├─ kernel: " + image['kernel'])
        #         print("   │      ├─ packager: " + image['packager'])
        #         print("   │      ├─ packaging_date: " + image['packaging_date'])
        #         print("   │      ├─ description: " + image['description'])
        #         print("   │ ")

        #     print("")
        #     print(" Please enter image name to download.")
        #     image_selected_input = input(" -->: ")

        #     for image in bootstrap_images_list['images']:
        #         if image['name'] == image_selected_input:
        #             image_selected = image
        #             break

        #     protected_os_system("mkdir -p /var/lib/bluebanquise-diskless/bootstrap_images/" + image_selected['name'])
        #     logging.info(bcolors.OKBLUE + ' Downloading image from ' + image_selected['url'] + bcolors.ENDC)
        #     logging.info(bcolors.OKBLUE + ' Image will be stored inside /var/lib/bluebanquise-diskless/bootstrap_images/' + bcolors.ENDC)
        #     response = requests.get(image_selected['url'])
        #     with open("/var/lib/bluebanquise-diskless/bootstrap_images/" + image_selected['name'] + "/" + image_selected['url'].split('/')[-1], 'wb') as file:
        #         file.write(response.content)
        #     logging.info(bcolors.OKBLUE + 'Writing image metadata.' + bcolors.ENDC)
        #     with open("/var/lib/bluebanquise-diskless/bootstrap_images/" + image_selected['name'] + "/metadata.yaml", "w") as file:
        #         yaml.dump(image_selected, file)
        #     print(" Bootstrap image downloaded and ready to be used.")

    if main_action == '3':

#        try:

            logging.info(bcolors.OKBLUE + 'Checking bootstrap images in /var/lib/bluebanquise/diskless/bootstrap_images/' + bcolors.ENDC)

            print("")
            print(" Available bootstrap images to use as reference:")
            print("   │ ")

            for it in os.scandir("/var/lib/bluebanquise/diskless/bootstrap_images/"):
                if it.is_dir() and it.name != "tmp":
                    with open(it.path + "/metadata.yaml", "r") as file:
                        image_metadata = yaml.safe_load(file)
                    display_image_metadata(image_metadata)

            print(" Please enter bootstrap image name to use as source:")
            image_selected_input = input(" -->: ")
            print(" Now, please enter new reference image name:")
            image_selected_input_name = input(" -->: ")
            print("")

            with open("/var/lib/bluebanquise/diskless/bootstrap_images/" + image_selected_input + "/metadata.yaml", "r") as file:
                image_selected = yaml.safe_load(file)
            image_selected['reference_name'] = image_selected['name']
            image_selected['name'] = image_selected_input_name
            image_selected['type'] = "nfs_reference"

            logging.info(bcolors.OKBLUE + "Extracting bootstrap image copy in /nfs/diskless/" + image_selected['name'] + bcolors.ENDC)
            protected_os_system("mkdir -p /nfs/diskless/" + image_selected['name'])
            protected_os_system("tar xzf /var/lib/bluebanquise/diskless/bootstrap_images/" + image_selected['reference_name'] + "/image.tar.gz -C /nfs/diskless/" + image_selected['name'])
            protected_os_system("rm -f /nfs/diskless/" + image_selected['name'] + "/metadata.yaml")
            logging.info(bcolors.OKBLUE + "Creating image folder at /var/www/html/pxe/diskless/" + image_selected['name'] + bcolors.ENDC)
            protected_os_system("mkdir -p /var/www/html/pxe/diskless/" + image_selected['name'])

            if image_selected['family'] == "el9":
                protected_os_system("cp /nfs/diskless/" + image_selected['name'] + "/boot/initramfs-" + image_selected['kernel'] + ".img /var/www/html/pxe/diskless/" + image_selected['name'] + "/initramfs-" + image_selected['kernel'] + ".img")
                protected_os_system("cp /nfs/diskless/" + image_selected['name'] + "/usr/lib/modules/" + image_selected['kernel'] + "/vmlinuz /var/www/html/pxe/diskless/" + image_selected['name'] + "/vmlinuz-" + image_selected['kernel'])
            elif image_selected['family'] == "el8":
                protected_os_system("cp /nfs/diskless/" + image_selected['name'] + "/boot/initramfs-" + image_selected['kernel'] + ".img /var/www/html/pxe/diskless/" + image_selected['name'] + "/initramfs-" + image_selected['kernel'] + ".img")
                protected_os_system("cp /nfs/diskless/" + image_selected['name'] + "/boot/vmlinuz-" + image_selected['kernel'] + " /var/www/html/pxe/diskless/" + image_selected['name'] + "/vmlinuz-" + image_selected['kernel'])
            else:
                print(" Sorry, image family " + image_selected['family'] + " is unknown :( , aborting.")
                quit(1)
            protected_os_system("chmod 644 /var/www/html/pxe/diskless/" + image_selected['name'] + "/*")
            ipxe_content = '''#!ipxe
        echo |
        echo | Entering diskless/images/{image_name}/boot.ipxe
        echo |
        set image-kernel {image_kernel}
        set image-initramfs {image_initramfs}
        echo | Now starting nfs image boot.
        echo |
        echo | Parameters used:
        echo | > Image target: {image_name}
        echo | > Console: ${{eq-console}}
        echo | > Additional kernel parameters: ${{eq-kernel-parameters}} ${{dedicated-kernel-parameters}}
        echo |
        echo | Loading linux ...
        kernel http://${{next-server}}/pxe/diskless/{image_name}/${{image-kernel}} initrd=${{image-initramfs}} selinux=0 text=1 root=nfs:${{next-server}}:/nfs/diskless/{image_name},vers=4.2,rw rw ${{eq-console}} ${{eq-kernel-parameters}} ${{dedicated-kernel-parameters}} rd.net.timeout.carrier=30 rd.net.timeout.ifup=60 rd.net.dhcp.retry=4
        echo | Loading initial ramdisk ...
        initrd http://${{next-server}}/pxe/diskless/{image_name}/${{image-initramfs}}
        echo | ALL DONE! We are ready.
        echo | Booting in 4s ...
        echo |
        echo +----------------------------------------------------+
        sleep 4
        boot
        '''.format(image_kernel=("vmlinuz-" + image_selected['kernel']), image_initramfs=("initramfs-" + image_selected['kernel'] + ".img"), image_name=image_selected['name'])

            ipxe_file = open("/var/www/html/pxe/diskless/" + image_selected['name'] + "/boot.ipxe", "w")
            ipxe_file.write(ipxe_content)
            ipxe_file.close()
            with open("/var/www/html/pxe/diskless/" + image_selected['name'] + "/metadata.yaml", "w") as file:
                yaml.dump(image_selected, file)
            print("\n Reference image has been created :)")
            print(" You can now edit image directly inside /nfs/diskless/" + image_selected['name'])
            print(" Or you can also link image to a node of the target pool, boot it,")
            print(" and live modify it. To do so, use next section in main menu.")
            print(" Please read related help section for detailed explanations and warnings.")

#        except:
#            print(" \nSomething went wrong :(")
#            print(" Please investigate displayed logs.")
#            print(" Note that the tool do not remove any temporary files before success, allowing you to debug.")

    if main_action == '4':

#        try:

            # Gather reference images
            gathered_reference = []
            logging.info(bcolors.OKBLUE + 'Checking reference images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
            for it in os.scandir("/var/www/html/pxe/diskless/"):
                if it.is_dir():
                    with open(it.path + "/metadata.yaml", "r") as file:
                        image_metadata = yaml.safe_load(file)
                        if image_metadata['type'] == "nfs_reference":
                            gathered_reference.append(image_metadata)

            if len(gathered_reference) > 0:
                print("")
                print(" REFERENCE IMAGES:")
                print("   │ ")
                for image in gathered_reference:
                    display_image_metadata(image)
            else:
                print(" REFERENCE IMAGES: none found")
                quit()

            print(" Please enter reference image to link to a node:")
            image_selected_input = input(" -->: ")
            print(" Now, please enter target node to be linked to this image:")
            node_selected_input = input(" -->: ")
            print(" Ok, and to finish, I would need a temporary password for image's internal bluebanquise user.")
            print(" You will be able to update it, or remove it once image is created")
            print(" to allow ssh keys based authentication only.")
            image_selected_user_password = input(" -->: ")
            print("")
            image_selected_user_password = crypt.crypt(image_selected_user_password, crypt.mksalt(crypt.METHOD_SHA512))

            logging.info(bcolors.OKBLUE + 'Adding bluebanquise user to image...' + bcolors.ENDC)
            protected_os_system("groupadd -R /nfs/diskless/" + image_selected_input + "/ --system bluebanquise")
            protected_os_system("useradd  -R /nfs/diskless/" + image_selected_input + "/ -m -c 'BlueBanquise user' -d /var/lib/bluebanquise --system -g bluebanquise -s /bin/bash -p '" + image_selected_user_password + "' bluebanquise")
#            protected_os_system("useradd  -R /nfs/diskless/" + image_selected_input + "/ -m -c 'BlueBanquise user' -d /var/lib/bluebanquise --system -g bluebanquise -s /bin/bash bluebanquise")

            protected_os_system("echo 'bluebanquise ALL=(ALL:ALL) NOPASSWD:ALL' > /nfs/diskless/" + image_selected_input + "/etc/sudoers.d/bluebanquise")

            logging.info(bcolors.OKBLUE + 'Updating /etc/exports...' + bcolors.ENDC)
            protected_os_system("cat /etc/exports | grep '# diskless' || echo '# diskless' | tee -a /etc/exports")
            protected_os_system("cat /etc/exports | grep '/nfs/diskless/" + image_selected_input + "' && sed -i 's/\/nfs\/diskless\/" + image_selected_input + "\ .*/\/nfs\/diskless\/" + image_selected_input + " " + node_selected_input + "(rw,no_root_squash)/' /etc/exports || sed -i -e '$a/nfs/diskless/" + image_selected_input + " " + node_selected_input + "(rw,no_root_squash)' /etc/exports")
            #  cat /etc/exports | grep '/nfs/diskless/almalinux_8_minimal ' && sudo sed -i 's/\/nfs\/diskless\/almalinux_9_minimal\ .*/\/nfs\/diskless\/almalinux_9_minimal mgt8(rw,no_root_squash)/' /etc/exports || sudo sed -i -e '$a/nfs/diskless/almalinux_9_minimal mgt2(rw,no_root_squash)' /etc/exports
            logging.info(bcolors.OKBLUE + 'Restarting nfs server service...' + bcolors.ENDC)
            protected_os_system("systemctl restart nfs-server")
            print("\n Image linked to the node :)")
            print(" Please boot the node and tune image according to your need.")
            print(" You will need to set node next boot on this image using command:")
            print(" bluebanquise-bootset -b diskless -i " + image_selected_input + " -n " + node_selected_input)
            print(" If you use Ansible BlueBanquise roles, please remember to skip-tags 'identify' and 'secret'.")

#        except:
#            print(" \nSomething went wrong :(")
#            print(" Please investigate displayed logs.")
#            print(" Note that the tool do not remove any temporary files before success, allowing you to debug.")

    if main_action == '5':

#        try:

            # Gather reference images
            gathered_reference = []
            logging.info(bcolors.OKBLUE + 'Checking reference images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
            for it in os.scandir("/var/www/html/pxe/diskless/"):
                if it.is_dir():
                    with open(it.path + "/metadata.yaml", "r") as file:
                        image_metadata = yaml.safe_load(file)
                        if image_metadata['type'] == "nfs_reference":
                            gathered_reference.append(image_metadata)

            if len(gathered_reference) > 0:
                print("")
                print(" REFERENCE IMAGES:")
                print("   │ ")
                for image in gathered_reference:
                    display_image_metadata(image)
                    print("   │ ")
            else:
                print(" REFERENCE IMAGES: none found")
                quit()

            print(" Please enter reference image to check available kernels:")
            image_selected_input = input(" -->: ")

            ## Attention, RHEL 9 et 8 uniquement pour le moment
            print(" Detected kernels are the following:")
            for it in os.scandir("/nfs/diskless/" + image_selected_input + "/lib/modules/"):
                if it.is_dir():
                    print(" - " + it.name)

            print(" Now, please enter kernel to be used as default for boot:")
            kernel_selected = input(" -->: ")

            logging.info(bcolors.OKBLUE + 'Updating image metadata...' + bcolors.ENDC)
            with open("/var/www/html/pxe/diskless/" + image_selected_input + "/metadata.yaml", "r") as file:
                image_selected = yaml.safe_load(file)
            image_selected['kernel'] = kernel_selected
            with open("/var/www/html/pxe/diskless/" + image_selected_input + "/metadata.yaml", "w") as file:
                yaml.dump(image_selected, file)
            logging.info(bcolors.OKBLUE + 'Updating boot.ipxe file...' + bcolors.ENDC)
            with open("/var/www/html/pxe/diskless/" + image_selected_input + "/boot.ipxe", 'r') as file:
                file_lines = file.readlines()
            for count, value in enumerate(file_lines):
                if "set image-kernel" in value:
                    file_lines[count] = "set image-kernel vmlinuz-" + kernel_selected
                if "set image-initramfs" in value:
                    file_lines[count] = "set image-initramfs initramfs-" + kernel_selected + ".img"

            logging.info(bcolors.OKBLUE + 'Copying new kernel from nfs image to http folder...' + bcolors.ENDC)

            if image_selected['family'] == "el9":
                protected_os_system("cp /nfs/diskless/" + image_selected_input + "/boot/initramfs-" + kernel_selected + ".img /var/www/html/pxe/diskless/" + image_selected_input + "/initramfs-" + kernel_selected + ".img")
                protected_os_system("cp /nfs/diskless/" + image_selected_input + "/lib/modules/" + kernel_selected + "/vmlinuz /var/www/html/pxe/diskless/" + image_selected_input + "/vmlinuz-" + kernel_selected)
            elif image_selected['family'] == "el8":
                protected_os_system("cp /nfs/diskless/" + image_selected_input + "/boot/initramfs-" + kernel_selected + ".img /var/www/html/pxe/diskless/" + image_selected_input + "/initramfs-" + kernel_selected + ".img")
                protected_os_system("cp /nfs/diskless/" + image_selected_input + "/boot/vmlinuz-" + kernel_selected + " /var/www/html/pxe/diskless/" + image_selected_input + "/vmlinuz-" + kernel_selected)
            else:
                print(" Sorry, image family " + image_selected['family'] + " is unknown :( , aborting.")
                quit(1)

            print("\n Kernel " + kernel_selected + " set as default for next boot :)")
            print(" You will need to restart the node for changes to take effect.")

#        except:
#            print(" \nSomething went wrong :(")
#            print(" Please investigate displayed logs.")
#            print(" Note that the tool do not remove any temporary files before success, allowing you to debug.")

    if main_action == '6':
            
#        try:

            # Gather reference images
            gathered_reference = []
            logging.info(bcolors.OKBLUE + 'Checking reference images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
            for it in os.scandir("/var/www/html/pxe/diskless/"):
                if it.is_dir():
                    with open(it.path + "/metadata.yaml", "r") as file:
                        image_metadata = yaml.safe_load(file)
                        if image_metadata['type'] == "nfs_reference":
                            gathered_reference.append(image_metadata)

            if len(gathered_reference) > 0:
                print("")
                print(" REFERENCE IMAGES:")
                print("   │ ")
                for image in gathered_reference:
                    display_image_metadata(image)
            else:
                print(" REFERENCE IMAGES: none found")
                quit()

            print(" Please enter reference image to clone:")
            image_selected_input = input(" -->: ")
            print(" Please enter clone reference image name:")
            image_clone_input = input(" -->: ")

            logging.info(bcolors.OKBLUE + 'Cloning image...' + bcolors.ENDC)


    if main_action == '7':

#        try:

            # Gather reference images
            gathered_reference = []
            logging.info(bcolors.OKBLUE + 'Checking reference images in /var/www/html/pxe/diskless/' + bcolors.ENDC)
            for it in os.scandir("/var/www/html/pxe/diskless/"):
                if it.is_dir():
                    with open(it.path + "/metadata.yaml", "r") as file:
                        image_metadata = yaml.safe_load(file)
                        if image_metadata['type'] == "nfs_reference":
                            gathered_reference.append(image_metadata)

            if len(gathered_reference) > 0:
                print("")
                print(" REFERENCE IMAGES:")
                print("   │ ")
                for image in gathered_reference:
                    display_image_metadata(image)
            else:
                print(" REFERENCE IMAGES: none found")
                quit()

            print(" Please enter reference image to convert to live:")
            image_selected_input = input(" -->: ")

            with open("/var/www/html/pxe/diskless/" + image_selected_input + "/metadata.yaml", "r") as file:
                        image_selected = yaml.safe_load(file)

            print(" Now, please enter new live image name:")
            image_selected_input_name = input(" -->: ")
            image_selected['reference_name'] = image_selected['name'] + "," + image_selected['reference_name']
            image_selected['name'] = image_selected_input_name
            image_selected['type'] = "live"

            print(" I now need a live size limit in RAM, in Mb:")
            live_size = input(" -->: ")
            logging.info(bcolors.OKBLUE + 'Preparing FS...' + bcolors.ENDC)
            protected_os_system("mkdir -p /var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir/LiveOS/")
            protected_os_system("dd if=/dev/zero of=/var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir/LiveOS/rootfs.img bs=1M count=" + live_size)
            protected_os_system("mkfs.xfs /var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir/LiveOS/rootfs.img")
            os.makedirs("/var/www/html/pxe/diskless/" + image_selected['name'] + "/mountdir/")
            protected_os_system("mount -o loop /var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir/LiveOS/rootfs.img /var/www/html/pxe/diskless/" + image_selected['name'] + "/mountdir/")
            logging.info(bcolors.OKBLUE + 'Copying files from reference image...' + bcolors.ENDC)
            protected_os_system("cp -a /nfs/diskless/" + image_selected['reference_name'].split(",")[0] + "/* /var/www/html/pxe/diskless/" + image_selected['name'] + "/mountdir/")
            protected_os_system("umount /var/www/html/pxe/diskless/" + image_selected['name'] + "/mountdir/")
            logging.info(bcolors.OKBLUE + 'Squashing image' + bcolors.ENDC)
            protected_os_system("mksquashfs /var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir /var/www/html/pxe/diskless/" + image_selected['name'] + "/squashfs.img")
            logging.info(bcolors.OKBLUE + 'Copying kernel and initramfs...' + bcolors.ENDC)
            shutil.rmtree("/var/www/html/pxe/diskless/" + image_selected['name'] + "/workdir")
            protected_os_system("cp -a /var/www/html/pxe/diskless/" + image_selected['reference_name'].split(",")[0] + "/initramfs* /var/www/html/pxe/diskless/" + image_selected['name'] + "/")
            protected_os_system("chmod 644 /var/www/html/pxe/diskless/" + image_selected['name'] + "/initramfs-*")
            protected_os_system("cp -a /var/www/html/pxe/diskless/" + image_selected['reference_name'].split(",")[0] + "/vmlinuz* /var/www/html/pxe/diskless/" + image_selected['name'] + "/")

            ipxe_content = '''#!ipxe
        echo |
        echo | Entering diskless/images/{image_name}/boot.ipxe
        echo |
        set image-kernel {image_kernel}
        set image-initramfs {image_initramfs}
        echo | Now starting live image boot.
        echo |
        echo | Parameters used:
        echo | > Image target: {image_name}
        echo | > Console: ${{eq-console}}
        echo | > Additional kernel parameters: ${{eq-kernel-parameters}} ${{dedicated-kernel-parameters}}
        echo |
        echo | Loading linux ...
        kernel http://${{next-server}}/pxe/diskless/{image_name}/${{image-kernel}} initrd=${{image-initramfs}} selinux=0 text=1 root=live:http://${{next-server}}/pxe/diskless/{image_name}/squashfs.img rw ${{eq-console}} ${{eq-kernel-parameters}} ${{dedicated-kernel-parameters}} rd.net.timeout.carrier=30 rd.net.timeout.ifup=60 rd.net.dhcp.retry=4
        echo | Loading initial ramdisk ...
        initrd http://${{next-server}}/pxe/diskless/{image_name}/${{image-initramfs}}
        echo | ALL DONE! We are ready.
        echo | Booting in 4s ...
        echo |
        echo +----------------------------------------------------+
        sleep 4
        boot
        '''.format(image_kernel=("vmlinuz-" + image_selected['kernel']), image_initramfs=("initramfs-" + image_selected['kernel'] + ".img"), image_name=image_selected['name'])

            ipxe_file = open("/var/www/html/pxe/diskless/" + image_selected['name'] + "/boot.ipxe", "w")
            ipxe_file.write(ipxe_content)
            ipxe_file.close()
            with open("/var/www/html/pxe/diskless/" + image_selected['name'] + "/metadata.yaml", "w") as file:
                yaml.dump(image_selected, file)

            print("\n Livenet image created :)")
            print(" Please boot the node pool with this image using:")
            print(" bluebanquise-bootset -b diskless -i " + image_selected['name'] + " -n mynodes")

#        except:
#            print(" \nSomething went wrong :(")
#            print(" Please investigate displayed logs.")
#            print(" Note that the tool do not remove any temporary files before success, allowing you to debug.")

    if main_action == '10':
        break

print("\n\n Thank you for using BlueBanquise diskless, have a great day! :) \n\n")