---
- name: "package <|> Install {{ nic_packages_to_install | join(' ') }}"
  ansible.builtin.package:
    name: "{{ nic_packages_to_install }}"
    state: present
  tags:
    - package

- name: "service <|> Manage {{ nic_services_to_start | join(' ') }} state"
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: "{{ (nic_start_services | bool) | ternary('started', omit) }}"
  loop: "{{ nic_services_to_start }}"
  tags:
    - service

- name: nmcli <|> Set NICs configuration # noqa args[module]
  community.general.nmcli:
    # Tuned
    conn_name: "{{ item.conn_name | default(item.interface) | string }}"
    ifname: "{{ item.ifname | default(item.physical_device) | default(omit) }}"
    ip4: "{{ nic_j2_ip4 | trim | default(omit,true) }}"
    gw4: "{{ nic_j2_gw4 | trim | default(omit,true) }}"
    routes4: "{{ nic_j2_routes4 | trim | default(omit,true) }}"
    route_metric4: "{{ nic_j2_route_metric4 | trim | default(omit,true) }}"
    never_default4: "{{ nic_j2_never_default4 | trim | default(omit,true) }}"
    dns4: "{{ nic_j2_dns4 | trim | default(omit,true) }}"
    dns4_search: "{{ nic_j2_dns4_search | trim | default(omit,true) }}"
    ip6: "{{ nic_j2_ip6 | trim | default(omit,true) }}"
    gw6: "{{ nic_j2_gw6 | trim | default(omit,true) }}"
    mtu: "{{ nic_j2_mtu | trim | default(omit,true) }}"
    type: "{{ item.type | default('ethernet') }}"  # Even if in the documentation type is optional, it is in fact mandatory. Default to ethernet.
    # Standard
    state: "{{ item.state | default('present') }}"
    autoconnect: "{{ item.autoconnect | default(omit) }}"
    ageingtime: "{{ item.ageingtime | default(omit) }}"
    arp_interval: "{{ item.arp_interval | default(omit) }}"
    arp_ip_target: "{{ item.arp_ip_target | default(omit) }}"
    dhcp_client_id: "{{ item.dhcp_client_id | default(omit) }}"
    dns6: "{{ item.dns6 | default(omit) }}"
    dns6_search: "{{ item.dns6_search | default(omit) }}"
    downdelay: "{{ item.downdelay | default(omit) }}"
    egress: "{{ item.egress | default(omit) }}"
    flags: "{{ item.flags | default(omit) }}"
    forwarddelay: "{{ item.forwarddelay | default(omit) }}"
    hairpin: "{{ item.hairpin | default(omit) }}"
    hellotime: "{{ item.hellotime | default(omit) }}"
    ingress: "{{ item.ingress | default(omit) }}"
    ip_tunnel_dev: "{{ item.ip_tunnel_dev | default(omit) }}"
    ip_tunnel_local: "{{ item.ip_tunnel_local | default(omit) }}"
    ip_tunnel_remote: "{{ item.ip_tunnel_remote | default(omit) }}"
    mac: "{{ item.force_mac | default(omit) }}"
    master: "{{ item.master | default(omit) }}"
    maxage: "{{ item.maxage | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    miimon: "{{ item.miimon | default(omit) }}"
    path_cost: "{{ item.path_cost | default(omit) }}"
    primary: "{{ item.primary | default(omit) }}"
    priority: "{{ item.priority | default(omit) }}"
    slavepriority: "{{ item.slavepriority | default(omit) }}"
    stp: "{{ item.stp | default(omit) }}"
    updelay: "{{ item.updelay | default(omit) }}"
    vlandev: "{{ item.vlandev | default(omit) }}"
    vlanid: "{{ item.vlanid | default(omit) }}"
    vxlan_id: "{{ item.vxlan_id | default(omit) }}"
    vxlan_local: "{{ item.vxlan_local | default(omit) }}"
    vxlan_remote: "{{ item.vxlan_remote | default(omit) }}"
    zone: "{{ item.zone | default(omit) }}"
    method4: "{{ item.method4 | default(omit) }}"
    method6: "{{ item.method6 | default(omit) }}"
    addr_gen_mode6: "{{ item.addr_gen_mode6 | default(omit) }}"
    dns4_ignore_auto: "{{ item.dns4_ignore_auto | default(omit) }}"
    dns6_ignore_auto: "{{ item.dns6_ignore_auto | default(omit) }}"
    gsm: "{{ item.gsm | default(omit) }}"
    gw4_ignore_auto: "{{ item.gw4_ignore_auto | default(omit) }}"
    gw6_ignore_auto: "{{ item.gw6_ignore_auto | default(omit) }}"
    ignore_unsupported_suboptions: "{{ item.ignore_unsupported_suboptions | default(omit) }}"
    ip_privacy6: "{{ item.ip_privacy6 | default(omit) }}"
    ip_tunnel_input_key: "{{ item.ip_tunnel_input_key | default(omit) }}"
    ip_tunnel_output_key: "{{ item.ip_tunnel_output_key | default(omit) }}"
    may_fail4: "{{ item.may_fail4 | default(omit) }}"
    route_metric6: "{{ item.route_metric6 | default(omit) }}"
    routes4_extended: "{{ item.routes4_extended | default(omit) }}"
    routes6: "{{ item.routes6 | default(omit) }}"
    routes6_extended: "{{ item.routes6_extended | default(omit) }}"
    routing_rules4: "{{ item.routing_rules4 | default(omit) }}"
    runner: "{{ item.runner | default(omit) }}"
    runner_fast_rate: "{{ item.runner_fast_rate | default(omit) }}"
    runner_hwaddr_policy: "{{ item.runner_hwaddr_policy | default(omit) }}"
    ssid: "{{ item.ssid | default(omit) }}"
    transport_mode: "{{ item.transport_mode | default(omit) }}"
    vpn: "{{ item.vpn | default(omit) }}"
    wifi: "{{ item.wifi | default(omit) }}"
    wifi_sec: "{{ item.wifi_sec | default(omit) }}"
    wireguard: "{{ item.wireguard | default(omit) }}"
    xmit_hash_policy: "{{ item.xmit_hash_policy | default(omit) }}"
    slave_type: "{{ item.slave_type | default(omit) }}"
  notify: command <|> Reload connections
  loop: "{{ network_interfaces }}"
  register: nic_apply
  when: item.skip is not defined or (item.skip is defined and not item.skip)
  tags:
    - identify

- name: meta <|> Run handler tasks to reload connections
  ansible.builtin.meta: flush_handlers

- name: shell <|> Force apply nic settings
  ansible.builtin.shell: "nmcli con down {{ item.item.interface }} && sleep {{ nic_restart_timeout }} && nmcli con up {{ item.item.interface }}"
  loop: "{{ nic_apply.results }}"
  when:  # noqa no-handler
    - nic_force_nic_restart
    - item.changed

- name: reboot <|> Reboot system to ensure apply nic configuration
  ansible.builtin.reboot:
    reboot_timeout: "{{ nic_reboot_timeout }}"
  register: reboot_status
  loop: "{{ nic_apply.results }}"
  when:  # noqa no-handler
    - nic_force_reboot
    - item.changed
    - not (reboot_status.changed | d(false))
