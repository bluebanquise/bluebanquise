#!/usr/bin/env python3

import sys,time
import yaml
import os
#from rich.traceback import install
import textwrap
import validators
import zoneinfo
import json
import configparser

from argparse import ArgumentParser

# Get arguments
parser = ArgumentParser()
parser.add_argument("-c", "--create", dest="create_inventory",
                    help="Create inventory from scratch", action='store_true')

passed_arguments, cli_request = parser.parse_known_args()

#install(show_locals=True)

# https://theasciicode.com.ar/extended-ascii-code/box-drawings-single-line-horizontal-vertical-character-ascii-code-197.html
# https://misc.flogisoft.com/bash/tip_colors_and_formatting


class windows_manager(object):
  """ This is a small windows manager for terminal.
  I hate things that clear the terminal because it often clears logs or errors.
  So this is an home made concept of windows manager that lives verticaly in the terminal :)
  Ox
  """

  def __init__(self, init_nesting_level=-1):
    self.w_nesting_level = init_nesting_level
    #self.w_colors = ['39', '214', '201', '226']
    self.w_colors = ['226', '208', '196', '163']
    self.w_allowed_colors = {
      'blue': '\033[94m',
      'green': '\033[92m',
      'reset': '\033[0m'
    }

  def t_green(self, message):
    return self.w_allowed_colors['green'] + message + self.w_allowed_colors['reset']

  def t_blue(self, message):
    return self.w_allowed_colors['blue'] + message + self.w_allowed_colors['reset']

  def w_sprint(self, message, nl=True):
    # Now we have to parse text lines by lines, and decorate it
    # We use native decorator, but we have to complete each line with spaces
    umessage = []
    for line in message.splitlines():
      umessage.append(self.w_decorator_left_right(line, force_nesting_level = self.w_nesting_level + 1, fill_line = True))
    message = '\n'.join(umessage)
    if nl:
      message = message + '\n'
    for c in message:
      sys.stdout.write(c)
      sys.stdout.flush()
      if c == "\n":
        time.sleep(1./30)
      # if c != " ":
      #   time.sleep(1./500)

  def w_breakline(self):
    message = self.w_decorator_left_right("", force_nesting_level = self.w_nesting_level + 1, fill_line = True, fill_dash = True) + '\n'
    for c in message:
      sys.stdout.write(c)
      sys.stdout.flush()

  def w_input(self, message, nl=True):
    umessage = self.w_decorator_left_right(message, force_nesting_level = self.w_nesting_level + 1, no_right = True)
    answer = input(umessage)
    # https://stackoverflow.com/questions/12586601/remove-last-stdout-line-in-python
    CURSOR_UP_ONE = '\x1b[1A'
    ERASE_LINE = '\x1b[2K'
    print(CURSOR_UP_ONE + ERASE_LINE + CURSOR_UP_ONE)
    print(self.w_decorator_left_right(message + str(answer), force_nesting_level = self.w_nesting_level + 1, fill_line = True))
    return answer

  def w_create(self, w_title=None):
    self.w_sprint("\n")
    # Get size of terminal
    # We do that each time to cover terminal resized during usage
    columns = os.get_terminal_size().columns
    # Set lead section depending if we are creating or closing a window
    # This is of size 5
    lead = "╭─────"
    self.w_nesting_level = self.w_nesting_level + 1
    # Create current windows frame
    box = "\033[38;5;" + self.w_colors[self.w_nesting_level] + "m" + lead
    # Manage title if any
    if w_title is not None:
      box = box + " " + str(w_title) + " "
      title_size = len(w_title) + 2
    else:
      title_size = 0
    # Complete the line
    for i in range(1, columns - self.w_nesting_level * 4 * 2 - len(lead) - title_size - 1, 1):
      box = box + "─"
    box = box + "╮" + "\033[0m"
    box = self.w_decorator_left_right(box)
    print(box)

  def w_destroy(self):
    # Get size of terminal
    # We do that each time to cover terminal resized during usage
    columns = os.get_terminal_size().columns
    # Set lead section depending if we are creating or closing a window
    # This is of size 5
    lead = "╰─────"
    # Create current windows frame
    box = "\033[38;5;" + self.w_colors[self.w_nesting_level] + "m" + lead
    # Complete the line
    for i in range(1, columns - self.w_nesting_level * 4 * 2 - len(lead) - 1, 1):
      box = box + "─"
    box = box + "╯" + "\033[0m"
    box = self.w_decorator_left_right(box)
    print(box)
    self.w_nesting_level = self.w_nesting_level - 1

  def w_decorator_left_right(self, message, force_nesting_level=None, fill_line=False, no_right=False, fill_dash=False):
    if force_nesting_level is not None:
      nesting_level = force_nesting_level
    else:
      nesting_level = self.w_nesting_level
    buffer = ""
    for nl in range(0, nesting_level, 1):
      buffer = buffer + "\033[38;5;" + self.w_colors[nl] + "m│\033[0m   "
    message = buffer + message
    buffer = ""
    if not no_right:
      for nl in range(nesting_level-1, -1, -1):
        buffer = buffer + "\033[38;5;" + self.w_colors[nl] + "m   │\033[0m"
      # Before applying right buffer, lets check if line must be filled
      if fill_line:
        columns = os.get_terminal_size().columns
        message_buffer = (message + buffer)
        message_buffer = message_buffer.replace("\033[0m", "")
        for i in self.w_colors:
          message_buffer = message_buffer.replace("\033[38;5;" + str(i) + "m", "")
        for i, v in self.w_allowed_colors.items():
          message_buffer = message_buffer.replace(v, "")
        if fill_dash:
          for i in range(1, columns - len(message_buffer), 1):
            message = message + "-"
        else:
          for i in range(1, columns - len(message_buffer), 1):
            message = message + " "
      # if fill_dash:
      #   columns = os.get_terminal_size().columns
      #   message_buffer = (message + buffer)
      #   message_buffer = message_buffer.replace("\033[0m", "")
      #   for i in self.w_colors:
      #     message_buffer = message_buffer.replace("\033[38;5;" + str(i) + "m", "")
      #   for i, v in self.w_allowed_colors.items():
      #     message_buffer = message_buffer.replace(v, "")
      #   for i in range(1, columns - len(message_buffer), 1):
      #     message = message + "-"

      message = message + buffer
    return message

print("""\

              (o_
    (o_  (o_  //\\
    (/)_ (/)_ V_/_

  BlueBanquise manager
  v1.0.0
  https://github.com/bluebanquise/bluebanquise/""")

wm = windows_manager()

# Check if we want a new inventory
if passed_arguments.create_inventory:

    wm.w_create(w_title="BlueBanquise manager - Create a new inventory")

    answer = 0
    menu_message = """
    This tool will help you create a new inventory
    that will be stored into the bluebanquise user's home
    into 'inventories' folder.

    Note that you can have multiple inventories.
    A link to default one will be created in the inventories folder.
    
    If you need to use another inventory than the default one, just
    specify it to tools using '-i inventory_name' at call.
    Or use the bluebanquise-manager tool to change default inventory.
    
    Press ENTER to continue.

    """
    wm.w_sprint(textwrap.dedent(menu_message))
    answer = wm.w_input("❱❱❱ ")

    # GLOBAL PARAMETERS
    wm.w_create(w_title="Cluster global parameters")
    wm.w_sprint(textwrap.dedent("""
    Global parameters contains shared parameters that
    are stored into the group_vars/all/global.yml file.
    
    """
    ))
    wm.w_sprint(textwrap.dedent("""
    Please enter the name of the new cluster,
    which will also be the name of the new inventory.

    """))
    cluster_inventory_name = str(wm.w_input("❱❱❱ "))

    wm.w_sprint(textwrap.dedent("""
    Thank you. Now please give me the time zone of this cluster.
    You can get a full list of available time zones using the command:

      timedatectl list-timezones

    For example: Europe/Paris

    """))
    zime_zone = str(wm.w_input("❱❱❱ "))  #### TODO : add a check if time zone exists

    wm.w_sprint(textwrap.dedent("""
    Ok. Now, please give me domain name of the cluster.

    For example: cluster.local

    """))
    domain_name = str(wm.w_input("❱❱❱ "))  #### TODO : add a check if this is a domain name

    wm.w_sprint(textwrap.dedent("""
    Now moving to network related settings...
    
    """
    ))

    wm.w_destroy()

    # NETWORK PARAMETERS
    wm.w_create(w_title="Network parameters")
    wm.w_sprint(textwrap.dedent("""
    Networks parameters are stored into the group_vars/all/networks.yml file.
    
    """
    ))
    wm.w_sprint(textwrap.dedent("""
    Lets create the first logical network.
    This network will be the core administration network of your cluster.
    Please give me a name for it.
    
    Note that I will then prepend it with 'net-'
    as this is how administration networks are named in BlueBanquise.

    For example: admin
    Which will become 'net-admin'.

    """))
    network_name = str(wm.w_input("❱❱❱ "))

    wm.w_sprint(textwrap.dedent("""
    Ok, now please give me the subnet and the prefix of this network.
    By default, proposal is subnet to be 10.10.0.0 and prefix to be 16.

    """))
    network_subnet = str(wm.w_input("Subnet ❱❱❱ "))
    network_prefix = str(wm.w_input("Prefix ❱❱❱ "))
    
    wm.w_sprint(textwrap.dedent("""
    Now moving to OS related settings...
    
    """
    ))

    wm.w_destroy()

    # OS PARAMETERS
    wm.w_create(w_title="OS parameters")
    wm.w_sprint(textwrap.dedent("""
    OS parameters are set per os logical groups, inside group_vars folder.
    Nodes are added in their corresponding os group depending of cluster configuration.
    
    """
    ))
    allowed_distributions={
        'Ubuntu': [20,22,24],
        'Debian': [11,12,13],
        'OpenSuseLeap': [15],
        'RedHat': [8,9,10]
    }
    menu_message = """
    Please define the main operating system of the cluster.

    Possible entries are:
    """
    wm.w_sprint(textwrap.dedent(menu_message))

    menu_message = ""
    for distribution in allowed_distributions:
        menu_message = menu_message + "\n    - " + distribution
    wm.w_sprint(textwrap.dedent(menu_message))

    menu_message = """
    Note that RedHat stands also for its clones (Rocky, Alma, etc.).

    """
    wm.w_sprint(textwrap.dedent(menu_message))
    os_distribution = str(wm.w_input("❱❱❱ "))




else:
    wm = windows_manager()

    wm.w_create(w_title="BlueBanquise manager")

    answer = 0
    while True:

        menu_message = """
        - Manage inventory -
        1. Global parameters
        2. Groups (function, os, hardware, ...)
        3. Nodes

        - Manage nodes -
        4. Deploy nodes OS
        5. Deploy nodes configuration
        6. Nodes hardware operations (power, console, ...)

        9. Exit

        """
        wm.w_sprint(textwrap.dedent(menu_message))
        answer = int(wm.w_input("❱❱❱ "))
    #    answer = int(input(wm.w_rprint("❱❱❱ ")))

        if answer == 9:
            wm.w_sprint("-- Exiting. Have a nice day :)")
            wm.w_destroy()
            quit(0)

        if answer == 1:
            wm.w_sprint("-- Entering global parameters", nl=True)
            wm.w_create(w_title="Global parameters")
            wm.w_sprint(textwrap.dedent("""
                Global parameters contains Ansible roles' shared parameters,
                like cluster name, cluster domain name, time zone, etc.
                
                """
            ))
            while True:
                menu_message = """
                Please select desired setting to manage:

                1. Cluster settings
                2. Networks

                9. Go back

                """
                wm.w_sprint(textwrap.dedent(menu_message))
                answer = int(wm.w_input("❱❱❱ "))

                if answer == 9:
                    break

                #######################################################################################################
                ###################### CLUSTER SETTINGS
                ########
                if answer == 1:

                    wm.w_sprint("-- Entering cluster settings")
                    wm.w_create(w_title="Cluster settings")
                    # Basic configuration is in cluster.yml file
                    # We open advanced configuration only if needed
                    wm.w_sprint("-- Reading configuration")
                    if os.path.exists("inventory/group_vars/all/cluster.yml"):
                        with open("inventory/group_vars/all/cluster.yml", 'r') as file:
                            cluster = yaml.safe_load(file)
                    else:
                        wm.w_sprint("-- Could not find file, generating default")
                        cluster = {
                            'bb_cluster_name' : 'bluebanquise-cluster',
                            'bb_time_zone' : 'Europe/Brussels',
                            'bb_domain_name' : 'cluster.local'
                        }
                    while True:
                        menu_message = """
                        1. Cluster name: {cna}
                        2. Cluster Time zone: {ctz}
                        3. Cluster domain name: {cdm}
                        4. Advanced settings

                        9. Go back

                        """.format(
                            cgreen=wm.w_allowed_colors['green'],
                            creset=wm.w_allowed_colors['reset'],
                            cna=wm.t_green(cluster['bb_cluster_name']),
                            ctz=wm.t_green(cluster['bb_time_zone']),
                            cdm=wm.t_green(cluster['bb_domain_name'])
                        )
                        wm.w_sprint(textwrap.dedent(menu_message))
                        answer = int(wm.w_input("❱❱❱ "))

                        if answer == 9:
                            break

                        if answer == 1:
                            wm.w_sprint("Current cluster name is: " + wm.t_green(str(cluster['bb_cluster_name'])))
                            wm.w_sprint("Please enter new name:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            cluster['bb_cluster_name'] = sub_answer
                            wm.w_sprint("-- Writting new configuration")
                            with open("inventory/group_vars/all/cluster.yml", 'w+') as file:
                                yaml.dump(cluster, file, default_flow_style=False)

                        if answer == 2:
                            wm.w_sprint("Current cluster time zone is: " + wm.t_green(str(cluster['bb_time_zone'])))
                            wm.w_sprint("Please enter new time zone (enter nothing to display available time zones):")
                            sub_answer = wm.w_input("❱❱❱ ")
                            if sub_answer not in zoneinfo.available_timezones():
                                wm.w_sprint('-- Time zone provided is not valid, please check syntax')
                                wm.w_sprint('-- Available system time zones available are:')
                                for tz in sorted(zoneinfo.available_timezones()):
                                    fprint(tz)
                                continue
                            cluster['bb_time_zone'] = sub_answer
                            wm.w_sprint("-- Writting new configuration")
                            with open("inventory/group_vars/all/cluster.yml", 'w+') as file:
                                yaml.dump(cluster, file, default_flow_style=False)

                        if answer == 3:
                            wm.w_sprint("Current cluster domain name is: " + wm.t_green(str(cluster['bb_domain_name'])))
                            wm.w_sprint("Please enter domain name:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            if not validators.domain(sub_answer):
                                wm.w_sprint('-- Domain name provided is not valid, please check syntax')
                                continue
                            cluster['bb_domain_name'] = sub_answer
                            wm.w_sprint("-- Writting new configuration")
                            with open("inventory/group_vars/all/cluster.yml", 'w+') as file:
                                yaml.dump(cluster, file, default_flow_style=False)

                        if answer == 4:
                            wm.w_sprint("-- Reading advanced configuration")
                            if os.path.exists("inventory/group_vars/all/cluster_advanced.yml"):
                                with open("inventory/group_vars/all/cluster_advanced.yml", 'r') as file:
                                    cluster_advanced = yaml.safe_load(file)
                            else:
                                wm.w_sprint("-- Could not find file, generating default")
                                cluster_advanced = {
                                    'bb_icebergs_system' : 'false'
                                }
                            wm.w_sprint(" ")
                            for key, value in cluster_advanced.items():
                                wm.w_sprint(wm.t_blue(str(key)) + ": " + str(value))
                            wm.w_sprint(" ")
                            wm.w_sprint("Please enter " + wm.t_blue("key") + " to edit")
                            answer = wm.w_input("❱❱❱ ")
                            if answer in cluster_advanced:
                                wm.w_sprint("Ok, please enter now new value")
                                sub_answer = wm.w_input("❱❱❱ ")
                                cluster_advanced[answer] = sub_answer
                                wm.w_sprint("-- Writting new configuration")
                                with open("inventory/group_vars/all/cluster_advanced.yml", 'w+') as file:
                                    yaml.dump(cluster_advanced, file, default_flow_style=False)
                            else:
                                wm.w_sprint("-- Could not find key in list, please check entered syntax")
                    wm.w_destroy()

                #######################################################################################################
                ###################### NETWORK SETTINGS
                ########
                if answer == 2:

                    wm.w_sprint("-- Entering networks settings")
                    wm.w_create(w_title="Network settings")
                    wm.w_sprint("\n-- Reading configuration")
                    if os.path.exists("inventory/group_vars/all/networks.yml"):
                        with open("inventory/group_vars/all/networks.yml", 'r') as file:
                            networks = yaml.safe_load(file)
                    else:
                        wm.w_sprint("-- Could not find file, generating default")
                        networks = {
                            'networks' : {}
                        }
                    wm.w_sprint(textwrap.dedent("""
                        Logical networks allow nodes to communicate.
                        A network can be either a management network, and so
                        be dedicated to deploy and manage nodes, or a
                        simple network, to handle basic inter hosts communications
                        or link the cluster to the outside world.

                        """
                    ))
                    while True:

                        wm.w_sprint("Current configuration:")
                        wm.w_sprint(" ")
                        wm.w_sprint(yaml.dump(networks, default_flow_style=False))

                        menu_message = """
                        Please choose next action:

                        1. Add new network
                        2. Edit existing network
                        3. Delete network

                        9. Go back

                        """
                        wm.w_sprint(textwrap.dedent(menu_message))
                        answer = int(wm.w_input("❱❱❱ "))

                        if answer == 9:
                            break

                        if answer == 1:
                            wm.w_sprint("-- Entering new network")
                            wm.w_create(w_title="New network")
                            wm.w_sprint("\nPlease enter new network name:")
                            wm.w_sprint("Remember that administration networks start with prefix " + wm.t_blue('net-') + '.')
                            nname = wm.w_input("❱❱❱ ")
                            networks['networks'][nname] = {}
                            wm.w_sprint("Please enter network " + wm.t_blue(nname) + " subnet:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            networks['networks'][nname]['subnet'] = sub_answer
                            wm.w_sprint("Please enter network " + wm.t_blue(nname) + " prefix:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            networks['networks'][nname]['prefix'] = sub_answer
                            wm.w_sprint("Please enter network " + wm.t_blue(nname) + " gateway (ip4) if exist:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            if sub_answer:
                                networks['networks'][nname]['gateway4'] = sub_answer
                            else:
                                networks['networks'][nname]['gateway4'] = None
                            if nname.startswith('net-'):
                                wm.w_sprint("According to the name, this is an admininstration network.")
                                wm.w_sprint("Register this network in dhcp server (Y/N)?")
                                sub_answer = wm.w_input("❱❱❱ ")
                                if sub_answer.lower() in ["y","yes"]:
                                    networks['networks'][nname]['dhcp_server'] = True
                                else:
                                    networks['networks'][nname]['dhcp_server'] = False
                                wm.w_sprint("Register this network in dns server (Y/N)?")
                                sub_answer = wm.w_input("❱❱❱ ")
                                if sub_answer.lower() in ["y","yes"]:
                                    networks['networks'][nname]['dns_server'] = True
                                else:
                                    networks['networks'][nname]['dns_server'] = False
                                wm.w_sprint("Should all services be on the same ip")
                                wm.w_sprint("or do you plan to distribute services,")
                                wm.w_sprint("like a dns server on another ip than time server?")
                                wm.w_sprint("So question is: will this network use a single services ip? (Y/N)?")
                                sub_answer = wm.w_input("❱❱❱ ")
                                if sub_answer.lower() in ["y","yes"]:
                                    wm.w_sprint("Ok, using a global services ip for this network.")
                                    wm.w_sprint("What will be this ip?")
                                    sub_answer = wm.w_input("❱❱❱ ")
                                    networks['networks'][nname]['services_ip'] = sub_answer
                                else:
                                    wm.w_sprint("Ok, generating default fine grained services.")
                                    wm.w_sprint("You will be able to define them or add others later.")
                                    networks['networks'][nname]['services'] = {}
                                    networks['networks'][nname]['services']['dns'] = []
                                    networks['networks'][nname]['services']['ntp'] = []
                                    networks['networks'][nname]['services']['pxe'] = []
                            wm.w_sprint("-- Writting new configuration")
                            with open("inventory/group_vars/all/networks.yml", 'w+') as file:
                                yaml.dump(networks, file, default_flow_style=False)

                        if answer == 2:
                            wm.w_sprint("-- Entering network editor")
                            wm.w_create(w_title="Network edit")
                            wm.w_sprint("\nCurrent networks:")
                            for net in networks['networks']:
                                wm.w_sprint("- " + net)
                            wm.w_sprint("Please enter network to edit:")
                            nname = wm.w_input("❱❱❱ ")
                            if not nname in networks['networks']:
                                wm.w_sprint("Network unknown, please check syntax.")
                                continue
                            wm.w_sprint("Current network settings are:")
                            wm.w_sprint(" ")
                            for key, value in networks['networks'][nname].items():
                                wm.w_sprint(wm.t_blue(str(key)) + ": " + str(value))
                            wm.w_sprint(" ")
                            wm.w_sprint("Please enter " + wm.t_blue("key") + " to edit")
                            answer = wm.w_input("❱❱❱ ")
                            if answer in networks['networks'][nname]:
                                if answer == "services":
                                    wm.w_sprint("Current registered services:")
                                    for service, service_values in networks['networks'][nname]['services'].items():
                                        wm.w_sprint(" - " + service + ": " + str(service_values))
                                    wm.w_sprint("Please select a service to edit")
                                    service = wm.w_input("❱❱❱ ")
                                    if service not in networks['networks'][nname]['services']:
                                        wm.w_sprint("Service unknown, please check syntax.")
                                        continue
                                    wm.w_sprint("You can add as multiple ipv4/hostname couples to each service.")
                                    wm.w_sprint("For now, you have to pass the dict as a string. For example:")
                                    wm.w_sprint("[{'ip4': '10.10.0.1', 'hostname': 'mgt1'},{'ip4': '10.10.0.2', 'hostname': 'mgt2'}]")
                                    wm.w_sprint("Please enter dict to set for this service:")
                                    answer = wm.w_input("❱❱❱ ")
                                    networks['networks'][nname]['services'][service] = json.loads(answer)
                                else:
                                    wm.w_sprint("Ok, please enter now new value")
                                    sub_answer = wm.w_input("❱❱❱ ")
                                    networks['networks'][nname][answer] = sub_answer
                                wm.w_sprint("-- Writting new configuration")
                                with open("inventory/group_vars/all/networks.yml", 'w+') as file:
                                    yaml.dump(networks, file, default_flow_style=False)
                            else:
                                wm.w_sprint("-- Could not find key in list, please check entered syntax")

                            wm.w_destroy()

                    wm.w_destroy()

            wm.w_destroy()

        if answer == 2:
            wm.w_sprint("-- Entering groups", nl=True)
            wm.w_create(w_title="Groups")
            wm.w_sprint(textwrap.dedent("""
                Hosts must be grouped into logical groups
                to define which function, hardware, and OS they belong to.
                Combination of one of each of these 3 groups makes
                in BlueBanquise an equipment profile.
                It is also possible to create custom groups to ease
                cluster administration.
                
                """
            ))
            while True:
                menu_message = """
                Please selection kind of group to manage:

                1. Function groups
                2. Hardware groups
                3. OS groups
                4. Custom groups

                9. Go back

                """
                wm.w_sprint(textwrap.dedent(menu_message))
                answer = int(wm.w_input("❱❱❱ "))

                if answer == 9:
                    break

                if answer == 1:
                    wm.w_sprint("-- Entering Function groups", nl=True)
                    wm.w_create(w_title="Function groups")

                    wm.w_sprint("\n-- Checking configuration")
                    if not os.path.exists("inventory/cluster/fn"):
                        wm.w_sprint("\n-- File does not existe, creating default one")
                        with open("inventory/cluster/fn", 'w+') as file:
                            file.write("[fn_management]\n")
                    wm.w_sprint(textwrap.dedent("""
                        A function group defines the purpose of a node.
                        It can be for example "compute" or "worker".
                        Note that the "management" function group is mandatory
                        and so cannot be deleted.
                        Function groups start in the Ansible inventory
                        with 'fn_' prefix.
                        
                        """
                    ))
                    while True:
                        menu_message = """
                        Please selection desired action:

                        1. List current function groups
                        2. Add a new function group
                        3. Rename a function group
                        4. Delete a function group

                        9. Go back

                        """
                        wm.w_sprint(textwrap.dedent(menu_message))
                        answer = int(wm.w_input("❱❱❱ "))

                        if answer == 9:
                            break

                        #######################################################################################################
                        ###################### LIST FN GROUPS
                        ########
                        if answer == 1:
                            wm.w_create(w_title="List function groups")
                            wm.w_sprint("-- Reading current configuration\n")
                            config = configparser.ConfigParser(allow_no_value=True)
                            config.read('inventory/cluster/fn')
                            wm.w_sprint("\nList of function groups with their hosts:")
                            for fng, fng_items in config.items():
                                if str(fng) != 'DEFAULT':
                                    wm.w_sprint('    ' + wm.t_blue(fng.replace('fn_','')) + ':')
                                    for host in fng_items:
                                        wm.w_sprint('        - ' + host)
                            wm.w_destroy()

                        #######################################################################################################
                        ###################### ADD FN GROUP
                        ########
                        if answer == 2:
                            wm.w_create(w_title="Add function group")
                            wm.w_sprint("-- Reading current configuration\n")
                            config = configparser.ConfigParser(allow_no_value=True)
                            config.read('inventory/cluster/fn')
                            wm.w_sprint("Please enter new function group, without its prefix 'fn_'")
                            wm.w_sprint("For example: 'compute', 'worker', or 'gateway', etc.")
                            answer = wm.w_input("❱❱❱ ")
                            # Check group does not already exist
                            for group in config:
                                if str(group).replace('fn_','') == answer:
                                    wm.w_sprint("Function group already exist!")
                                    wm.w_destroy()
                                    continue
                            config['fn_' + answer] = {}
                            wm.w_sprint("-- Creating new group folder")
                            if not os.path.exists('inventory/group_vars/fn_' + answer):
                                os.makedirs('inventory/group_vars/fn_' + answer)
                            wm.w_sprint("-- Writting new configuration")
                            with open('inventory/cluster/fn', 'w') as file:
                                    config.write(file)
                            wm.w_destroy()


                        #######################################################################################################
                        ###################### RENAME FN GROUP
                        ########
                        if answer == 3:
                            wm.w_create(w_title="Rename function group")
                            wm.w_sprint("-- Reading current configuration\n")
                            config = configparser.ConfigParser(allow_no_value=True)
                            config.read('inventory/cluster/fn')
                            wm.w_sprint("Current list of function groups:")
                            for fng, fng_items in config.items():
                                if str(fng) != 'DEFAULT':
                                    wm.w_sprint('    - ' + wm.t_blue(fng.replace('fn_','')))
                            wm.w_sprint("Please enter group to rename:")
                            answer = wm.w_input("❱❱❱ ")
                            # Check group does exist
                            fn_exist = False
                            for group in config:
                                if str(group).replace('fn_','') == answer:
                                    fn_exist = True
                                    break
                            if not fn_exist:
                                wm.w_sprint("Group does not exist, please check syntax")
                                wm.w_destroy()
                                continue
                            wm.w_sprint("Please enter new name for the group:")
                            sub_answer = wm.w_input("❱❱❱ ")
                            config['fn_' + sub_answer] = config['fn_' + answer]
                            config.remove_section('fn_' + answer)
                            if not os.path.exists('inventory/group_vars/fn_' + answer):
                                wm.w_sprint("-- Creating new group folder")
                                os.makedirs('inventory/group_vars/fn_' + sub_answer)
                            else:
                                wm.w_sprint("-- Renaming group folder")
                                os.rename('inventory/group_vars/fn_' + answer, 'inventory/group_vars/fn_' + sub_answer)
                            wm.w_sprint("-- Writting new configuration")
                            with open('inventory/cluster/fn', 'w') as file:
                                    config.write(file)
                            wm.w_destroy()

                        # wm.w_breakline()
                    wm.w_destroy()
            wm.w_destroy()